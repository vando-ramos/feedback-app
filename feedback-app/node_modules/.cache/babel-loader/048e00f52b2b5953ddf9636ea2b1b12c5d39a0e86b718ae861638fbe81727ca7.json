{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.regexp.flags.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n/**\n  * vee-validate v4.5.8\n  * (c) 2022 Abdelrahman Awad\n  * @license MIT\n  */\nimport { inject, getCurrentInstance, warn as warn$1, ref, unref, computed, reactive, watch, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw, readonly } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\nfunction isCallable(fn) {\n  return typeof fn === 'function';\n}\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\nconst isObject = obj => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\nfunction isIndex(value) {\n  return Number(value) >= 0;\n}\nfunction toNumber(value) {\n  const n = parseFloat(value);\n  return isNaN(n) ? value : n;\n}\nconst RULES = {};\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\nfunction defineRule(id, validator) {\n  // makes sure new rules are properly formatted.\n  guardExtend(id, validator);\n  RULES[id] = validator;\n}\n/**\r\n * Gets an already defined rule\r\n */\nfunction resolveRule(id) {\n  return RULES[id];\n}\n/**\r\n * Guards from extension violations.\r\n */\nfunction guardExtend(id, validator) {\n  if (isCallable(validator)) {\n    return;\n  }\n  throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\nfunction isLocator(value) {\n  return isCallable(value) && !!value.__locatorRef;\n}\n/**\r\n * Checks if an tag name is a native HTML tag and not a Vue component\r\n */\nfunction isHTMLTag(tag) {\n  return ['input', 'textarea', 'select'].includes(tag);\n}\n/**\r\n * Checks if an input is of type file\r\n */\nfunction isFileInputNode(tag, attrs) {\n  return isHTMLTag(tag) && attrs.type === 'file';\n}\nfunction isYupValidator(value) {\n  return !!value && isCallable(value.validate);\n}\nfunction hasCheckedAttr(type) {\n  return type === 'checkbox' || type === 'radio';\n}\nfunction isContainerValue(value) {\n  return isObject(value) || Array.isArray(value);\n}\n/**\r\n * True if the value is an empty object or array\r\n */\nfunction isEmptyContainer(value) {\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n  return isObject(value) && Object.keys(value).length === 0;\n}\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\nfunction isNotNestedPath(path) {\n  return /^\\[.+\\]$/i.test(path);\n}\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\nfunction isNativeMultiSelect(el) {\n  return isNativeSelect(el) && el.multiple;\n}\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\nfunction isNativeSelect(el) {\n  return el.tagName === 'SELECT';\n}\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\nfunction isNativeMultiSelectNode(tag, attrs) {\n  // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n  const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n  return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\nfunction shouldHaveValueBinding(tag, attrs) {\n  return isNativeMultiSelectNode(tag, attrs) || isFileInputNode(tag, attrs);\n}\nfunction isFormSubmitEvent(evt) {\n  return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\nfunction isEvent(evt) {\n  if (!evt) {\n    return false;\n  }\n  if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n    return true;\n  }\n  // this is for IE and Cypress #3161\n  /* istanbul ignore next */\n  if (evt && evt.srcElement) {\n    return true;\n  }\n  return false;\n}\nfunction isPropPresent(obj, prop) {\n  return prop in obj && obj[prop] !== IS_ABSENT;\n}\nfunction cleanupNonNestedPath(path) {\n  if (isNotNestedPath(path)) {\n    return path.replace(/\\[|\\]/gi, '');\n  }\n  return path;\n}\nfunction getFromPath(object, path, fallback) {\n  if (!object) {\n    return fallback;\n  }\n  if (isNotNestedPath(path)) {\n    return object[cleanupNonNestedPath(path)];\n  }\n  const resolvedValue = (path || '').split(/\\.|\\[(\\d+)\\]/).filter(Boolean).reduce((acc, propKey) => {\n    if (isContainerValue(acc) && propKey in acc) {\n      return acc[propKey];\n    }\n    return fallback;\n  }, object);\n  return resolvedValue;\n}\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\nfunction setInPath(object, path, value) {\n  if (isNotNestedPath(path)) {\n    object[cleanupNonNestedPath(path)] = value;\n    return;\n  }\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, set it\n    if (i === keys.length - 1) {\n      acc[keys[i]] = value;\n      return;\n    }\n    // Key does not exist, create a container for it\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      // container can be either an object or an array depending on the next key if it exists\n      acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n    }\n    acc = acc[keys[i]];\n  }\n}\nfunction unset(object, key) {\n  if (Array.isArray(object) && isIndex(key)) {\n    object.splice(Number(key), 1);\n    return;\n  }\n  if (isObject(object)) {\n    delete object[key];\n  }\n}\n/**\r\n * Removes a nested property from object\r\n */\nfunction unsetPath(object, path) {\n  if (isNotNestedPath(path)) {\n    delete object[cleanupNonNestedPath(path)];\n    return;\n  }\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, unset it\n    if (i === keys.length - 1) {\n      unset(acc, keys[i]);\n      break;\n    }\n    // Key does not exist, exit\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      break;\n    }\n    acc = acc[keys[i]];\n  }\n  const pathValues = keys.map((_, idx) => {\n    return getFromPath(object, keys.slice(0, idx).join('.'));\n  });\n  for (let i = pathValues.length - 1; i >= 0; i--) {\n    if (!isEmptyContainer(pathValues[i])) {\n      continue;\n    }\n    if (i === 0) {\n      unset(object, keys[0]);\n      continue;\n    }\n    unset(pathValues[i - 1], keys[i - 1]);\n  }\n}\n/**\r\n * A typed version of Object.keys\r\n */\nfunction keysOf(record) {\n  return Object.keys(record);\n}\n// Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\nfunction injectWithSelf(symbol, def = undefined) {\n  const vm = getCurrentInstance();\n  return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\nfunction warn(message) {\n  warn$1(`[vee-validate]: ${message}`);\n}\n/**\r\n * Ensures we deal with a singular field value\r\n */\nfunction normalizeField(field) {\n  if (Array.isArray(field)) {\n    return field[0];\n  }\n  return field;\n}\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n  if (Array.isArray(currentValue)) {\n    const newVal = [...currentValue];\n    const idx = newVal.indexOf(checkedValue);\n    idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n    return newVal;\n  }\n  return currentValue === checkedValue ? uncheckedValue : checkedValue;\n}\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\nfunction throttle(func, limit) {\n  let inThrottle;\n  let lastResult;\n  return function (...args) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n    if (!inThrottle) {\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n      lastResult = func.apply(context, args);\n    }\n    return lastResult;\n  };\n}\nfunction debounceAsync(inner, ms = 0) {\n  let timer = null;\n  let resolves = [];\n  return function (...args) {\n    // Run the function after a certain amount of time\n    if (timer) {\n      window.clearTimeout(timer);\n    }\n    timer = window.setTimeout(() => {\n      // Get the result of the inner function, then apply it to the resolve function of\n      // each promise that has been created since the last time the inner function was run\n      const result = inner(...args);\n      resolves.forEach(r => r(result));\n      resolves = [];\n    }, ms);\n    return new Promise(resolve => resolves.push(resolve));\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst normalizeChildren = (tag, context, slotProps) => {\n  if (!context.slots.default) {\n    return context.slots.default;\n  }\n  if (typeof tag === 'string' || !tag) {\n    return context.slots.default(slotProps());\n  }\n  return {\n    default: () => {\n      var _a, _b;\n      return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps());\n    }\n  };\n};\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\nfunction getBoundValue(el) {\n  if (hasValueBinding(el)) {\n    return el._value;\n  }\n  return undefined;\n}\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\nfunction hasValueBinding(el) {\n  return '_value' in el;\n}\nfunction normalizeEventValue(value) {\n  if (!isEvent(value)) {\n    return value;\n  }\n  const input = value.target;\n  // Vue sets the current bound value on `_value` prop\n  // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n  if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n    return getBoundValue(input);\n  }\n  if (input.type === 'file' && input.files) {\n    return Array.from(input.files);\n  }\n  if (isNativeMultiSelect(input)) {\n    return Array.from(input.options).filter(opt => opt.selected && !opt.disabled).map(getBoundValue);\n  }\n  // makes sure we get the actual `option` bound value\n  // #3440\n  if (isNativeSelect(input)) {\n    const selectedOption = Array.from(input.options).find(opt => opt.selected);\n    return selectedOption ? getBoundValue(selectedOption) : input.value;\n  }\n  return input.value;\n}\n\n/**\r\n * Normalizes the given rules expression.\r\n */\nfunction normalizeRules(rules) {\n  const acc = {};\n  Object.defineProperty(acc, '_$$isNormalized', {\n    value: true,\n    writable: false,\n    enumerable: false,\n    configurable: false\n  });\n  if (!rules) {\n    return acc;\n  }\n  // Object is already normalized, skip.\n  if (isObject(rules) && rules._$$isNormalized) {\n    return rules;\n  }\n  if (isObject(rules)) {\n    return Object.keys(rules).reduce((prev, curr) => {\n      const params = normalizeParams(rules[curr]);\n      if (rules[curr] !== false) {\n        prev[curr] = buildParams(params);\n      }\n      return prev;\n    }, acc);\n  }\n  /* istanbul ignore if */\n  if (typeof rules !== 'string') {\n    return acc;\n  }\n  return rules.split('|').reduce((prev, rule) => {\n    const parsedRule = parseRule(rule);\n    if (!parsedRule.name) {\n      return prev;\n    }\n    prev[parsedRule.name] = buildParams(parsedRule.params);\n    return prev;\n  }, acc);\n}\n/**\r\n * Normalizes a rule param.\r\n */\nfunction normalizeParams(params) {\n  if (params === true) {\n    return [];\n  }\n  if (Array.isArray(params)) {\n    return params;\n  }\n  if (isObject(params)) {\n    return params;\n  }\n  return [params];\n}\nfunction buildParams(provided) {\n  const mapValueToLocator = value => {\n    // A target param using interpolation\n    if (typeof value === 'string' && value[0] === '@') {\n      return createLocator(value.slice(1));\n    }\n    return value;\n  };\n  if (Array.isArray(provided)) {\n    return provided.map(mapValueToLocator);\n  }\n  // #3073\n  if (provided instanceof RegExp) {\n    return [provided];\n  }\n  return Object.keys(provided).reduce((prev, key) => {\n    prev[key] = mapValueToLocator(provided[key]);\n    return prev;\n  }, {});\n}\n/**\r\n * Parses a rule string expression.\r\n */\nconst parseRule = rule => {\n  let params = [];\n  const name = rule.split(':')[0];\n  if (rule.includes(':')) {\n    params = rule.split(':').slice(1).join(':').split(',');\n  }\n  return {\n    name,\n    params\n  };\n};\nfunction createLocator(value) {\n  const locator = crossTable => {\n    const val = getFromPath(crossTable, value) || crossTable[value];\n    return val;\n  };\n  locator.__locatorRef = value;\n  return locator;\n}\nfunction extractLocators(params) {\n  if (Array.isArray(params)) {\n    return params.filter(isLocator);\n  }\n  return keysOf(params).filter(key => isLocator(params[key])).map(key => params[key]);\n}\nconst DEFAULT_CONFIG = {\n  generateMessage: ({\n    field\n  }) => `${field} is not valid.`,\n  bails: true,\n  validateOnBlur: true,\n  validateOnChange: true,\n  validateOnInput: false,\n  validateOnModelUpdate: true\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\nconst getConfig = () => currentConfig;\nconst setConfig = newConf => {\n  currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\nconst configure = setConfig;\n\n/**\r\n * Validates a value against the rules.\r\n */\nasync function validate(value, rules, options = {}) {\n  const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n  const field = {\n    name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n    rules,\n    bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n    formData: (options === null || options === void 0 ? void 0 : options.values) || {}\n  };\n  const result = await _validate(field, value);\n  const errors = result.errors;\n  return {\n    errors,\n    valid: !errors.length\n  };\n}\n/**\r\n * Starts the validation process.\r\n */\nasync function _validate(field, value) {\n  if (isYupValidator(field.rules)) {\n    return validateFieldWithYup(value, field.rules, {\n      bails: field.bails\n    });\n  }\n  // if a generic function, use it as the pipeline.\n  if (isCallable(field.rules)) {\n    const ctx = {\n      field: field.name,\n      form: field.formData,\n      value: value\n    };\n    const result = await field.rules(value, ctx);\n    const isValid = typeof result !== 'string' && result;\n    const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n    return {\n      errors: !isValid ? [message] : []\n    };\n  }\n  const normalizedContext = Object.assign(Object.assign({}, field), {\n    rules: normalizeRules(field.rules)\n  });\n  const errors = [];\n  const rulesKeys = Object.keys(normalizedContext.rules);\n  const length = rulesKeys.length;\n  for (let i = 0; i < length; i++) {\n    const rule = rulesKeys[i];\n    const result = await _test(normalizedContext, value, {\n      name: rule,\n      params: normalizedContext.rules[rule]\n    });\n    if (result.error) {\n      errors.push(result.error);\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n  }\n  return {\n    errors\n  };\n}\n/**\r\n * Handles yup validation\r\n */\nasync function validateFieldWithYup(value, validator, opts) {\n  var _a;\n  const errors = await validator.validate(value, {\n    abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true\n  }).then(() => []).catch(err => {\n    // Yup errors have a name prop one them.\n    // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n    if (err.name === 'ValidationError') {\n      return err.errors;\n    }\n    // re-throw the error so we don't hide it\n    throw err;\n  });\n  return {\n    errors\n  };\n}\n/**\r\n * Tests a single input value against a rule.\r\n */\nasync function _test(field, value, rule) {\n  const validator = resolveRule(rule.name);\n  if (!validator) {\n    throw new Error(`No such validator '${rule.name}' exists.`);\n  }\n  const params = fillTargetValues(rule.params, field.formData);\n  const ctx = {\n    field: field.name,\n    value,\n    form: field.formData,\n    rule: Object.assign(Object.assign({}, rule), {\n      params\n    })\n  };\n  const result = await validator(value, params, ctx);\n  if (typeof result === 'string') {\n    return {\n      error: result\n    };\n  }\n  return {\n    error: result ? undefined : _generateFieldError(ctx)\n  };\n}\n/**\r\n * Generates error messages.\r\n */\nfunction _generateFieldError(fieldCtx) {\n  const message = getConfig().generateMessage;\n  if (!message) {\n    return 'Field is invalid';\n  }\n  return message(fieldCtx);\n}\nfunction fillTargetValues(params, crossTable) {\n  const normalize = value => {\n    if (isLocator(value)) {\n      return value(crossTable);\n    }\n    return value;\n  };\n  if (Array.isArray(params)) {\n    return params.map(normalize);\n  }\n  return Object.keys(params).reduce((acc, param) => {\n    acc[param] = normalize(params[param]);\n    return acc;\n  }, {});\n}\nasync function validateYupSchema(schema, values) {\n  const errorObjects = await schema.validate(values, {\n    abortEarly: false\n  }).then(() => []).catch(err => {\n    // Yup errors have a name prop one them.\n    // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n    if (err.name !== 'ValidationError') {\n      throw err;\n    }\n    // list of aggregated errors\n    return err.inner || [];\n  });\n  const results = {};\n  const errors = {};\n  for (const error of errorObjects) {\n    const messages = error.errors;\n    results[error.path] = {\n      valid: !messages.length,\n      errors: messages\n    };\n    if (messages.length) {\n      errors[error.path] = messages[0];\n    }\n  }\n  return {\n    valid: !errorObjects.length,\n    results,\n    errors\n  };\n}\nasync function validateObjectSchema(schema, values, opts) {\n  const paths = keysOf(schema);\n  const validations = paths.map(async path => {\n    var _a, _b, _c;\n    const fieldResult = await validate(getFromPath(values, path), schema[path], {\n      name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\n      values: values,\n      bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true\n    });\n    return Object.assign(Object.assign({}, fieldResult), {\n      path\n    });\n  });\n  let isAllValid = true;\n  const validationResults = await Promise.all(validations);\n  const results = {};\n  const errors = {};\n  for (const result of validationResults) {\n    results[result.path] = {\n      valid: result.valid,\n      errors: result.errors\n    };\n    if (!result.valid) {\n      isAllValid = false;\n      errors[result.path] = result.errors[0];\n    }\n  }\n  return {\n    valid: isAllValid,\n    results,\n    errors\n  };\n}\nfunction set(obj, key, val) {\n  if (typeof val.value === 'object') val.value = klona(val.value);\n  if (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n    Object.defineProperty(obj, key, val);\n  } else obj[key] = val.value;\n}\nfunction klona(x) {\n  if (typeof x !== 'object') return x;\n  var i = 0,\n    k,\n    list,\n    tmp,\n    str = Object.prototype.toString.call(x);\n  if (str === '[object Object]') {\n    tmp = Object.create(x.__proto__ || null);\n  } else if (str === '[object Array]') {\n    tmp = Array(x.length);\n  } else if (str === '[object Set]') {\n    tmp = new Set();\n    x.forEach(function (val) {\n      tmp.add(klona(val));\n    });\n  } else if (str === '[object Map]') {\n    tmp = new Map();\n    x.forEach(function (val, key) {\n      tmp.set(klona(key), klona(val));\n    });\n  } else if (str === '[object Date]') {\n    tmp = new Date(+x);\n  } else if (str === '[object RegExp]') {\n    tmp = new RegExp(x.source, x.flags);\n  } else if (str === '[object DataView]') {\n    tmp = new x.constructor(klona(x.buffer));\n  } else if (str === '[object ArrayBuffer]') {\n    tmp = x.slice(0);\n  } else if (str.slice(-6) === 'Array]') {\n    // ArrayBuffer.isView(x)\n    // ~> `new` bcuz `Buffer.slice` => ref\n    tmp = new x.constructor(x);\n  }\n  if (tmp) {\n    for (list = Object.getOwnPropertySymbols(x); i < list.length; i++) {\n      set(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n    }\n    for (i = 0, list = Object.getOwnPropertyNames(x); i < list.length; i++) {\n      if (Object.hasOwnProperty.call(tmp, k = list[i]) && tmp[k] === x[k]) continue;\n      set(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n    }\n  }\n  return tmp || x;\n}\nvar es6 = function equal(a, b) {\n  if (a === b) return true;\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n      for (i of a.entries()) if (!equal(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n      return true;\n    }\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;\n      return true;\n    }\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a !== a && b !== b;\n};\nlet ID_COUNTER = 0;\nfunction useFieldState(path, init) {\n  const {\n    value,\n    initialValue,\n    setInitialValue\n  } = _useFieldValue(path, init.modelValue, !init.standalone);\n  const {\n    errorMessage,\n    errors,\n    setErrors\n  } = _useFieldErrors(path, !init.standalone);\n  const meta = _useFieldMeta(value, initialValue, errors);\n  const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n  function setState(state) {\n    var _a;\n    if ('value' in state) {\n      value.value = state.value;\n    }\n    if ('errors' in state) {\n      setErrors(state.errors);\n    }\n    if ('touched' in state) {\n      meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n    }\n    if ('initialValue' in state) {\n      setInitialValue(state.initialValue);\n    }\n  }\n  return {\n    id,\n    path,\n    value,\n    initialValue,\n    meta,\n    errors,\n    errorMessage,\n    setState\n  };\n}\n/**\r\n * Creates the field value and resolves the initial value\r\n */\nfunction _useFieldValue(path, modelValue, shouldInjectForm) {\n  const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\n  const modelRef = ref(unref(modelValue));\n  function resolveInitialValue() {\n    if (!form) {\n      return unref(modelRef);\n    }\n    return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\n  }\n  function setInitialValue(value) {\n    if (!form) {\n      modelRef.value = value;\n      return;\n    }\n    form.setFieldInitialValue(unref(path), value);\n  }\n  const initialValue = computed(resolveInitialValue);\n  // if no form is associated, use a regular ref.\n  if (!form) {\n    const value = ref(resolveInitialValue());\n    return {\n      value,\n      initialValue,\n      setInitialValue\n    };\n  }\n  // to set the initial value, first check if there is a current value, if there is then use it.\n  // otherwise use the configured initial value if it exists.\n  // prioritize model value over form values\n  // #3429\n  const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\n  form.stageInitialValue(unref(path), currentValue);\n  // otherwise use a computed setter that triggers the `setFieldValue`\n  const value = computed({\n    get() {\n      return getFromPath(form.values, unref(path));\n    },\n    set(newVal) {\n      form.setFieldValue(unref(path), newVal);\n    }\n  });\n  return {\n    value,\n    initialValue,\n    setInitialValue\n  };\n}\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\nfunction _useFieldMeta(currentValue, initialValue, errors) {\n  const meta = reactive({\n    touched: false,\n    pending: false,\n    valid: true,\n    validated: !!unref(errors).length,\n    initialValue: computed(() => unref(initialValue)),\n    dirty: computed(() => {\n      return !es6(unref(currentValue), unref(initialValue));\n    })\n  });\n  watch(errors, value => {\n    meta.valid = !value.length;\n  }, {\n    immediate: true,\n    flush: 'sync'\n  });\n  return meta;\n}\n/**\r\n * Creates the error message state for the field state\r\n */\nfunction _useFieldErrors(path, shouldInjectForm) {\n  const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\n  function normalizeErrors(messages) {\n    if (!messages) {\n      return [];\n    }\n    return Array.isArray(messages) ? messages : [messages];\n  }\n  if (!form) {\n    const errors = ref([]);\n    return {\n      errors,\n      errorMessage: computed(() => errors.value[0]),\n      setErrors: messages => {\n        errors.value = normalizeErrors(messages);\n      }\n    };\n  }\n  const errors = computed(() => form.errorBag.value[unref(path)] || []);\n  return {\n    errors,\n    errorMessage: computed(() => errors.value[0]),\n    setErrors: messages => {\n      form.setFieldErrorBag(unref(path), normalizeErrors(messages));\n    }\n  };\n}\nfunction installDevtoolsPlugin(app) {\n  if (process.env.NODE_ENV !== 'production') {\n    setupDevtoolsPlugin({\n      id: 'vee-validate-devtools-plugin',\n      label: 'VeeValidate Plugin',\n      packageName: 'vee-validate',\n      homepage: 'https://vee-validate.logaretm.com/v4',\n      app,\n      logo: 'https://vee-validate.logaretm.com/v4/logo.png'\n    }, setupApiHooks);\n  }\n}\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n  setTimeout(async () => {\n    await nextTick();\n    API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n    API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n  }, 100);\n}, 100);\nfunction registerFormWithDevTools(form) {\n  const vm = getCurrentInstance();\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n    if (!app) {\n      return;\n    }\n    installDevtoolsPlugin(app);\n  }\n  DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n  DEVTOOLS_FORMS[form.formId]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FORMS[form.formId];\n    refreshInspector();\n  });\n  refreshInspector();\n}\nfunction registerSingleFieldWithDevtools(field) {\n  const vm = getCurrentInstance();\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n    if (!app) {\n      return;\n    }\n    installDevtoolsPlugin(app);\n  }\n  DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n  DEVTOOLS_FIELDS[field.id]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FIELDS[field.id];\n    refreshInspector();\n  });\n  refreshInspector();\n}\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n  error: 0xbd4b4b,\n  success: 0x06d77b,\n  unknown: 0x54436b,\n  white: 0xffffff,\n  black: 0x000000,\n  blue: 0x035397,\n  purple: 0xb980f0,\n  orange: 0xf5a962,\n  gray: 0xbbbfca\n};\nlet SELECTED_NODE = null;\nfunction setupApiHooks(api) {\n  API = api;\n  api.addInspector({\n    id: INSPECTOR_ID,\n    icon: 'rule',\n    label: 'vee-validate',\n    noSelectionText: 'Select a vee-validate node to inspect',\n    actions: [{\n      icon: 'done_outline',\n      tooltip: 'Validate selected item',\n      action: async () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n        const result = await SELECTED_NODE.validate();\n        console.log(result);\n      }\n    }, {\n      icon: 'delete_sweep',\n      tooltip: 'Clear validation state of the selected item',\n      action: () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n        if ('id' in SELECTED_NODE) {\n          SELECTED_NODE.resetField();\n          return;\n        }\n        SELECTED_NODE.resetForm();\n      }\n    }]\n  });\n  api.on.getInspectorTree(payload => {\n    if (payload.inspectorId !== INSPECTOR_ID) {\n      return;\n    }\n    const forms = Object.values(DEVTOOLS_FORMS);\n    const fields = Object.values(DEVTOOLS_FIELDS);\n    payload.rootNodes = [...forms.map(mapFormForDevtoolsInspector), ...fields.map(field => mapFieldForDevtoolsInspector(field))];\n  });\n  api.on.getInspectorState((payload, ctx) => {\n    if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n      return;\n    }\n    const {\n      form,\n      field,\n      type\n    } = decodeNodeId(payload.nodeId);\n    if (form && type === 'form') {\n      payload.state = buildFormState(form);\n      SELECTED_NODE = form;\n      return;\n    }\n    if (field && type === 'field') {\n      payload.state = buildFieldState(field);\n      SELECTED_NODE = field;\n      return;\n    }\n    SELECTED_NODE = null;\n  });\n}\nfunction mapFormForDevtoolsInspector(form) {\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(form);\n  const formTreeNodes = {};\n  Object.values(form.fieldsByPath.value).forEach(field => {\n    const fieldInstance = Array.isArray(field) ? field[0] : field;\n    if (!fieldInstance) {\n      return;\n    }\n    setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\n  });\n  function buildFormTree(tree, path = []) {\n    const key = [...path].pop();\n    if ('id' in tree) {\n      return Object.assign(Object.assign({}, tree), {\n        label: key || tree.label\n      });\n    }\n    if (isObject(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: key || '',\n        children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key]))\n      };\n    }\n    if (Array.isArray(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: `${key}[]`,\n        children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)]))\n      };\n    }\n    return {\n      id: '',\n      label: '',\n      children: []\n    };\n  }\n  const {\n    children\n  } = buildFormTree(formTreeNodes);\n  return {\n    id: encodeNodeId(form),\n    label: 'Form',\n    children,\n    tags: [{\n      label: 'Form',\n      textColor,\n      backgroundColor: bgColor\n    }, {\n      label: `${Object.keys(form.fieldsByPath.value).length} fields`,\n      textColor: COLORS.white,\n      backgroundColor: COLORS.unknown\n    }]\n  };\n}\nfunction mapFieldForDevtoolsInspector(field, form) {\n  const fieldInstance = normalizeField(field);\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(fieldInstance);\n  const isGroup = Array.isArray(field) && field.length > 1;\n  return {\n    id: encodeNodeId(form, fieldInstance, !isGroup),\n    label: unref(fieldInstance.name),\n    children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\n    tags: [isGroup ? undefined : {\n      label: 'Field',\n      textColor,\n      backgroundColor: bgColor\n    }, !form ? {\n      label: 'Standalone',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.gray\n    } : undefined, !isGroup && fieldInstance.type === 'checkbox' ? {\n      label: 'Checkbox',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.blue\n    } : undefined, !isGroup && fieldInstance.type === 'radio' ? {\n      label: 'Radio',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.purple\n    } : undefined, isGroup ? {\n      label: 'Group',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.orange\n    } : undefined].filter(Boolean)\n  };\n}\nfunction encodeNodeId(form, field, encodeIndex = true) {\n  const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\n  const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\n  let idx;\n  if (encodeIndex && field && Array.isArray(fieldGroup)) {\n    idx = fieldGroup.indexOf(field);\n  }\n  const idObject = {\n    f: form === null || form === void 0 ? void 0 : form.formId,\n    ff: fieldPath,\n    idx,\n    type: field ? 'field' : 'form'\n  };\n  return btoa(JSON.stringify(idObject));\n}\nfunction decodeNodeId(nodeId) {\n  try {\n    const idObject = JSON.parse(atob(nodeId));\n    const form = DEVTOOLS_FORMS[idObject.f];\n    if (!form && idObject.ff) {\n      const field = DEVTOOLS_FIELDS[idObject.ff];\n      if (!field) {\n        return {};\n      }\n      return {\n        type: idObject.type,\n        field\n      };\n    }\n    if (!form) {\n      return {};\n    }\n    const fieldGroup = form.fieldsByPath.value[idObject.ff];\n    return {\n      type: idObject.type,\n      form,\n      field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup\n    };\n  } catch (err) {\n    // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n  }\n  return {};\n}\nfunction buildFieldState(field) {\n  const {\n    errors,\n    meta,\n    value\n  } = field;\n  return {\n    'Field state': [{\n      key: 'errors',\n      value: errors.value\n    }, {\n      key: 'initialValue',\n      value: meta.initialValue\n    }, {\n      key: 'currentValue',\n      value: value.value\n    }, {\n      key: 'touched',\n      value: meta.touched\n    }, {\n      key: 'dirty',\n      value: meta.dirty\n    }, {\n      key: 'valid',\n      value: meta.valid\n    }]\n  };\n}\nfunction buildFormState(form) {\n  const {\n    errorBag,\n    meta,\n    values,\n    isSubmitting,\n    submitCount\n  } = form;\n  return {\n    'Form state': [{\n      key: 'submitCount',\n      value: submitCount.value\n    }, {\n      key: 'isSubmitting',\n      value: isSubmitting.value\n    }, {\n      key: 'touched',\n      value: meta.value.touched\n    }, {\n      key: 'dirty',\n      value: meta.value.dirty\n    }, {\n      key: 'valid',\n      value: meta.value.valid\n    }, {\n      key: 'initialValues',\n      value: meta.value.initialValues\n    }, {\n      key: 'currentValues',\n      value: values\n    }, {\n      key: 'errors',\n      value: keysOf(errorBag.value).reduce((acc, key) => {\n        var _a;\n        const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n        if (message) {\n          acc[key] = message;\n        }\n        return acc;\n      }, {})\n    }]\n  };\n}\n/**\r\n * Resolves the tag color based on the form state\r\n */\nfunction getTagTheme(fieldOrForm) {\n  // const fallbackColors = {\n  //   bgColor: COLORS.unknown,\n  //   textColor: COLORS.white,\n  // };\n  const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\n  return {\n    bgColor: isValid ? COLORS.success : COLORS.error,\n    textColor: isValid ? COLORS.black : COLORS.white\n  };\n}\n\n/**\r\n * Creates a field composite.\r\n */\nfunction useField(name, rules, opts) {\n  if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n    return useCheckboxField(name, rules, opts);\n  }\n  return _useField(name, rules, opts);\n}\nfunction _useField(name, rules, opts) {\n  const {\n    initialValue: modelValue,\n    validateOnMount,\n    bails,\n    type,\n    checkedValue,\n    label,\n    validateOnValueUpdate,\n    uncheckedValue,\n    standalone\n  } = normalizeOptions(unref(name), opts);\n  const form = !standalone ? injectWithSelf(FormContextKey) : undefined;\n  const {\n    id,\n    value,\n    initialValue,\n    meta,\n    setState,\n    errors,\n    errorMessage\n  } = useFieldState(name, {\n    modelValue,\n    standalone\n  });\n  /**\r\n   * Handles common onBlur meta update\r\n   */\n  const handleBlur = () => {\n    meta.touched = true;\n  };\n  const normalizedRules = computed(() => {\n    let rulesValue = unref(rules);\n    const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\n    if (schema && !isYupValidator(schema)) {\n      rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\n    }\n    if (isYupValidator(rulesValue) || isCallable(rulesValue)) {\n      return rulesValue;\n    }\n    return normalizeRules(rulesValue);\n  });\n  async function validateCurrentValue(mode) {\n    var _a, _b;\n    if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n      return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : {\n        valid: true,\n        errors: []\n      };\n    }\n    return validate(value.value, normalizedRules.value, {\n      name: unref(label) || unref(name),\n      values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n      bails\n    });\n  }\n  async function validateWithStateMutation() {\n    meta.pending = true;\n    meta.validated = true;\n    const result = await validateCurrentValue('validated-only');\n    setState({\n      errors: result.errors\n    });\n    meta.pending = false;\n    return result;\n  }\n  async function validateValidStateOnly() {\n    const result = await validateCurrentValue('silent');\n    meta.valid = result.valid;\n    return result;\n  }\n  function validate$1(opts) {\n    if (!(opts === null || opts === void 0 ? void 0 : opts.mode) || (opts === null || opts === void 0 ? void 0 : opts.mode) === 'force') {\n      return validateWithStateMutation();\n    }\n    if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'validated-only') {\n      return validateWithStateMutation();\n    }\n    return validateValidStateOnly();\n  }\n  // Common input/change event handler\n  const handleChange = (e, shouldValidate = true) => {\n    const newValue = normalizeEventValue(e);\n    value.value = newValue;\n    if (!validateOnValueUpdate && shouldValidate) {\n      validateWithStateMutation();\n    }\n  };\n  // Runs the initial validation\n  onMounted(() => {\n    if (validateOnMount) {\n      return validateWithStateMutation();\n    }\n    // validate self initially if no form was handling this\n    // forms should have their own initial silent validation run to make things more efficient\n    if (!form || !form.validateSchema) {\n      validateValidStateOnly();\n    }\n  });\n  function setTouched(isTouched) {\n    meta.touched = isTouched;\n  }\n  let unwatchValue;\n  function watchValue() {\n    unwatchValue = watch(value, validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly, {\n      deep: true\n    });\n  }\n  watchValue();\n  function resetField(state) {\n    var _a;\n    unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\n    const newValue = state && 'value' in state ? state.value : initialValue.value;\n    setState({\n      value: klona(newValue),\n      initialValue: klona(newValue),\n      touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n      errors: (state === null || state === void 0 ? void 0 : state.errors) || []\n    });\n    meta.pending = false;\n    meta.validated = false;\n    validateValidStateOnly();\n    // need to watch at next tick to avoid triggering the value watcher\n    nextTick(() => {\n      watchValue();\n    });\n  }\n  function setValue(newValue) {\n    value.value = newValue;\n  }\n  function setErrors(errors) {\n    setState({\n      errors: Array.isArray(errors) ? errors : [errors]\n    });\n  }\n  const field = {\n    id,\n    name,\n    label,\n    value,\n    meta,\n    errors,\n    errorMessage,\n    type,\n    checkedValue,\n    uncheckedValue,\n    bails,\n    resetField,\n    handleReset: () => resetField(),\n    validate: validate$1,\n    handleChange,\n    handleBlur,\n    setState,\n    setTouched,\n    setErrors,\n    setValue\n  };\n  provide(FieldContextKey, field);\n  if (isRef(rules) && typeof unref(rules) !== 'function') {\n    watch(rules, (value, oldValue) => {\n      if (es6(value, oldValue)) {\n        return;\n      }\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }, {\n      deep: true\n    });\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    field._vm = getCurrentInstance();\n    watch(() => Object.assign(Object.assign({\n      errors: errors.value\n    }, meta), {\n      value: value.value\n    }), refreshInspector, {\n      deep: true\n    });\n    if (!form) {\n      registerSingleFieldWithDevtools(field);\n    }\n  }\n  // if no associated form return the field API immediately\n  if (!form) {\n    return field;\n  }\n  // associate the field with the given form\n  form.register(field);\n  onBeforeUnmount(() => {\n    form.unregister(field);\n  });\n  // extract cross-field dependencies in a computed prop\n  const dependencies = computed(() => {\n    const rulesVal = normalizedRules.value;\n    // is falsy, a function schema or a yup schema\n    if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal)) {\n      return {};\n    }\n    return Object.keys(rulesVal).reduce((acc, rule) => {\n      const deps = extractLocators(rulesVal[rule]).map(dep => dep.__locatorRef).reduce((depAcc, depName) => {\n        const depValue = getFromPath(form.values, depName) || form.values[depName];\n        if (depValue !== undefined) {\n          depAcc[depName] = depValue;\n        }\n        return depAcc;\n      }, {});\n      Object.assign(acc, deps);\n      return acc;\n    }, {});\n  });\n  // Adds a watcher that runs the validation whenever field dependencies change\n  watch(dependencies, (deps, oldDeps) => {\n    // Skip if no dependencies or if the field wasn't manipulated\n    if (!Object.keys(deps).length) {\n      return;\n    }\n    const shouldValidate = !es6(deps, oldDeps);\n    if (shouldValidate) {\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }\n  });\n  return field;\n}\n/**\r\n * Normalizes partial field options to include the full options\r\n */\nfunction normalizeOptions(name, opts) {\n  const defaults = () => ({\n    initialValue: undefined,\n    validateOnMount: false,\n    bails: true,\n    rules: '',\n    label: name,\n    validateOnValueUpdate: true,\n    standalone: false\n  });\n  if (!opts) {\n    return defaults();\n  }\n  // TODO: Deprecate this in next major release\n  const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n  return Object.assign(Object.assign(Object.assign({}, defaults()), opts || {}), {\n    checkedValue\n  });\n}\n/**\r\n * Extracts the validation rules from a schema\r\n */\nfunction extractRuleFromSchema(schema, fieldName) {\n  // no schema at all\n  if (!schema) {\n    return undefined;\n  }\n  // there is a key on the schema object for this field\n  return schema[fieldName];\n}\nfunction useCheckboxField(name, rules, opts) {\n  const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n  const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n  const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n  function patchCheckboxApi(field) {\n    const handleChange = field.handleChange;\n    const checked = computed(() => {\n      const currentValue = unref(field.value);\n      const checkedVal = unref(checkedValue);\n      return Array.isArray(currentValue) ? currentValue.includes(checkedVal) : checkedVal === currentValue;\n    });\n    function handleCheckboxChange(e, shouldValidate = true) {\n      var _a, _b;\n      if (checked.value === ((_b = (_a = e) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.checked)) {\n        return;\n      }\n      let newValue = normalizeEventValue(e);\n      // Single checkbox field without a form to toggle it's value\n      if (!form) {\n        newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\n      }\n      handleChange(newValue, shouldValidate);\n    }\n    onBeforeUnmount(() => {\n      // toggles the checkbox value if it was checked\n      if (checked.value) {\n        handleCheckboxChange(unref(checkedValue), false);\n      }\n    });\n    return Object.assign(Object.assign({}, field), {\n      checked,\n      checkedValue,\n      uncheckedValue,\n      handleChange: handleCheckboxChange\n    });\n  }\n  return patchCheckboxApi(_useField(name, rules, opts));\n}\nconst FieldImpl = defineComponent({\n  name: 'Field',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: [String, Object],\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    rules: {\n      type: [Object, String, Function],\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    validateOnBlur: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnChange: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnInput: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnModelUpdate: {\n      type: Boolean,\n      default: undefined\n    },\n    bails: {\n      type: Boolean,\n      default: () => getConfig().bails\n    },\n    label: {\n      type: String,\n      default: undefined\n    },\n    uncheckedValue: {\n      type: null,\n      default: undefined\n    },\n    modelValue: {\n      type: null,\n      default: IS_ABSENT\n    },\n    modelModifiers: {\n      type: null,\n      default: () => ({})\n    },\n    'onUpdate:modelValue': {\n      type: null,\n      default: undefined\n    },\n    standalone: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props, ctx) {\n    const rules = toRef(props, 'rules');\n    const name = toRef(props, 'name');\n    const label = toRef(props, 'label');\n    const uncheckedValue = toRef(props, 'uncheckedValue');\n    const hasModelEvents = isPropPresent(props, 'onUpdate:modelValue');\n    const {\n      errors,\n      value,\n      errorMessage,\n      validate: validateField,\n      handleChange,\n      handleBlur,\n      setTouched,\n      resetField,\n      handleReset,\n      meta,\n      checked,\n      setErrors\n    } = useField(name, rules, {\n      validateOnMount: props.validateOnMount,\n      bails: props.bails,\n      standalone: props.standalone,\n      type: ctx.attrs.type,\n      initialValue: resolveInitialValue(props, ctx),\n      // Only for checkboxes and radio buttons\n      checkedValue: ctx.attrs.value,\n      uncheckedValue,\n      label,\n      validateOnValueUpdate: false\n    });\n    // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n    const onChangeHandler = hasModelEvents ? function handleChangeWithModel(e, shouldValidate = true) {\n      handleChange(e, shouldValidate);\n      ctx.emit('update:modelValue', value.value);\n    } : handleChange;\n    const handleInput = e => {\n      if (!hasCheckedAttr(ctx.attrs.type)) {\n        value.value = normalizeEventValue(e);\n      }\n    };\n    const onInputHandler = hasModelEvents ? function handleInputWithModel(e) {\n      handleInput(e);\n      ctx.emit('update:modelValue', value.value);\n    } : handleInput;\n    const fieldProps = computed(() => {\n      const {\n        validateOnInput,\n        validateOnChange,\n        validateOnBlur,\n        validateOnModelUpdate\n      } = resolveValidationTriggers(props);\n      const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\n      const baseOnInput = [e => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\n      const baseOnChange = [e => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\n      const attrs = {\n        name: props.name,\n        onBlur: baseOnBlur,\n        onInput: baseOnInput,\n        onChange: baseOnChange\n      };\n      attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n      if (hasCheckedAttr(ctx.attrs.type) && checked) {\n        attrs.checked = checked.value;\n      } else {\n        attrs.value = value.value;\n      }\n      const tag = resolveTag(props, ctx);\n      if (shouldHaveValueBinding(tag, ctx.attrs)) {\n        delete attrs.value;\n      }\n      return attrs;\n    });\n    const modelValue = toRef(props, 'modelValue');\n    watch(modelValue, newModelValue => {\n      // Don't attempt to sync absent values\n      if (newModelValue === IS_ABSENT && value.value === undefined) {\n        return;\n      }\n      if (newModelValue !== applyModifiers(value.value, props.modelModifiers)) {\n        value.value = newModelValue === IS_ABSENT ? undefined : newModelValue;\n        validateField();\n      }\n    });\n    function slotProps() {\n      return {\n        field: fieldProps.value,\n        value: value.value,\n        meta,\n        errors: errors.value,\n        errorMessage: errorMessage.value,\n        validate: validateField,\n        resetField,\n        handleChange: onChangeHandler,\n        handleInput: onInputHandler,\n        handleReset,\n        handleBlur,\n        setTouched,\n        setErrors\n      };\n    }\n    ctx.expose({\n      setErrors,\n      setTouched,\n      reset: resetField,\n      validate: validateField,\n      handleChange\n    });\n    return () => {\n      const tag = resolveDynamicComponent(resolveTag(props, ctx));\n      const children = normalizeChildren(tag, ctx, slotProps);\n      if (tag) {\n        return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n      }\n      return children;\n    };\n  }\n});\nfunction resolveTag(props, ctx) {\n  let tag = props.as || '';\n  if (!props.as && !ctx.slots.default) {\n    tag = 'input';\n  }\n  return tag;\n}\nfunction resolveValidationTriggers(props) {\n  var _a, _b, _c, _d;\n  const {\n    validateOnInput,\n    validateOnChange,\n    validateOnBlur,\n    validateOnModelUpdate\n  } = getConfig();\n  return {\n    validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n    validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n    validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n    validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate\n  };\n}\nfunction applyModifiers(value, modifiers) {\n  if (modifiers.number) {\n    return toNumber(value);\n  }\n  return value;\n}\nfunction resolveInitialValue(props, ctx) {\n  // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n  // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n  if (!hasCheckedAttr(ctx.attrs.type)) {\n    return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n  }\n  return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\nconst Field = FieldImpl;\nlet FORM_COUNTER = 0;\nfunction useForm(opts) {\n  const formId = FORM_COUNTER++;\n  // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n  // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\n  let RESET_LOCK = false;\n  // A lookup containing fields or field groups\n  const fieldsByPath = ref({});\n  // If the form is currently submitting\n  const isSubmitting = ref(false);\n  // The number of times the user tried to submit the form\n  const submitCount = ref(0);\n  // dictionary for field arrays to receive various signals like reset\n  const fieldArraysLookup = {};\n  // a private ref for all form values\n  const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {}));\n  // the source of errors for the form fields\n  const {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\n  // Gets the first error of each field\n  const errors = computed(() => {\n    return keysOf(errorBag.value).reduce((acc, key) => {\n      const bag = errorBag.value[key];\n      if (bag && bag.length) {\n        acc[key] = bag[0];\n      }\n      return acc;\n    }, {});\n  });\n  function getFirstFieldAtPath(path) {\n    const fieldOrGroup = fieldsByPath.value[path];\n    return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\n  }\n  function fieldExists(path) {\n    return !!fieldsByPath.value[path];\n  }\n  /**\r\n   * Holds a computed reference to all fields names and labels\r\n   */\n  const fieldNames = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((names, path) => {\n      const field = getFirstFieldAtPath(path);\n      if (field) {\n        names[path] = unref(field.label || field.name) || '';\n      }\n      return names;\n    }, {});\n  });\n  const fieldBailsMap = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((map, path) => {\n      var _a;\n      const field = getFirstFieldAtPath(path);\n      if (field) {\n        map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\n      }\n      return map;\n    }, {});\n  });\n  // mutable non-reactive reference to initial errors\n  // we need this to process initial errors then unset them\n  const initialErrors = Object.assign({}, (opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {});\n  // initial form values\n  const {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues);\n  // form meta aggregations\n  const meta = useFormMeta(fieldsByPath, formValues, initialValues, errors);\n  const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n  const formCtx = {\n    formId,\n    fieldsByPath,\n    values: formValues,\n    errorBag,\n    errors,\n    schema,\n    submitCount,\n    meta,\n    isSubmitting,\n    fieldArraysLookup,\n    validateSchema: unref(schema) ? validateSchema : undefined,\n    validate,\n    register: registerField,\n    unregister: unregisterField,\n    setFieldErrorBag,\n    validateField,\n    setFieldValue,\n    setValues,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setTouched,\n    resetForm,\n    handleSubmit,\n    stageInitialValue,\n    unsetInitialValue,\n    setFieldInitialValue\n  };\n  function isFieldGroup(fieldOrGroup) {\n    return Array.isArray(fieldOrGroup);\n  }\n  function applyFieldMutation(fieldOrGroup, mutation) {\n    if (Array.isArray(fieldOrGroup)) {\n      return fieldOrGroup.forEach(mutation);\n    }\n    return mutation(fieldOrGroup);\n  }\n  /**\r\n   * Manually sets an error message on a specific field\r\n   */\n  function setFieldError(field, message) {\n    setFieldErrorBag(field, message);\n  }\n  /**\r\n   * Sets errors for the fields specified in the object\r\n   */\n  function setErrors(fields) {\n    setErrorBag(fields);\n  }\n  /**\r\n   * Sets a single field value\r\n   */\n  function setFieldValue(field, value, {\n    force\n  } = {\n    force: false\n  }) {\n    var _a;\n    const fieldInstance = fieldsByPath.value[field];\n    const clonedValue = klona(value);\n    // field wasn't found, create a virtual field as a placeholder\n    if (!fieldInstance) {\n      setInPath(formValues, field, clonedValue);\n      return;\n    }\n    if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\n      // Multiple checkboxes, and only one of them got updated\n      const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\n      setInPath(formValues, field, newValue);\n      return;\n    }\n    let newValue = value;\n    // Single Checkbox: toggles the field value unless the field is being reset then force it\n    if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\n      newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\n    }\n    setInPath(formValues, field, newValue);\n  }\n  /**\r\n   * Sets multiple fields values\r\n   */\n  function setValues(fields) {\n    // clean up old values\n    keysOf(formValues).forEach(key => {\n      delete formValues[key];\n    });\n    // set up new values\n    keysOf(fields).forEach(path => {\n      setFieldValue(path, fields[path]);\n    });\n    // regenerate the arrays when the form values change\n    Object.values(fieldArraysLookup).forEach(f => f && f.reset());\n  }\n  /**\r\n   * Sets the touched meta state on a field\r\n   */\n  function setFieldTouched(field, isTouched) {\n    const fieldInstance = fieldsByPath.value[field];\n    if (fieldInstance) {\n      applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\n    }\n  }\n  /**\r\n   * Sets the touched meta state on multiple fields\r\n   */\n  function setTouched(fields) {\n    keysOf(fields).forEach(field => {\n      setFieldTouched(field, !!fields[field]);\n    });\n  }\n  /**\r\n   * Resets all fields\r\n   */\n  function resetForm(state) {\n    RESET_LOCK = true;\n    // set initial values if provided\n    if (state === null || state === void 0 ? void 0 : state.values) {\n      setInitialValues(state.values);\n      setValues(state === null || state === void 0 ? void 0 : state.values);\n    } else {\n      // clean up the initial values back to the original\n      setInitialValues(originalInitialValues.value);\n      // otherwise clean the current values\n      setValues(originalInitialValues.value);\n    }\n    Object.values(fieldsByPath.value).forEach(field => {\n      if (!field) {\n        return;\n      }\n      // avoid resetting the field values, because they should've been reset already.\n      applyFieldMutation(field, f => f.resetField());\n    });\n    if (state === null || state === void 0 ? void 0 : state.touched) {\n      setTouched(state.touched);\n    }\n    setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\n    submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\n    nextTick(() => {\n      RESET_LOCK = false;\n    });\n  }\n  function insertFieldAtPath(field, path) {\n    const rawField = markRaw(field);\n    const fieldPath = path;\n    // first field at that path\n    if (!fieldsByPath.value[fieldPath]) {\n      fieldsByPath.value[fieldPath] = rawField;\n      return;\n    }\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n    if (fieldAtPath && !Array.isArray(fieldAtPath)) {\n      fieldsByPath.value[fieldPath] = [fieldAtPath];\n    }\n    // add the new array to that path\n    fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\n  }\n  function removeFieldFromPath(field, path) {\n    const fieldPath = path;\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n    if (!fieldAtPath) {\n      return;\n    }\n    // same field at path\n    if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\n      delete fieldsByPath.value[fieldPath];\n      return;\n    }\n    if (isFieldGroup(fieldAtPath)) {\n      const idx = fieldAtPath.findIndex(f => f.id === field.id);\n      if (idx === -1) {\n        return;\n      }\n      fieldAtPath.splice(idx, 1);\n      if (fieldAtPath.length === 1) {\n        fieldsByPath.value[fieldPath] = fieldAtPath[0];\n        return;\n      }\n      if (!fieldAtPath.length) {\n        delete fieldsByPath.value[fieldPath];\n      }\n    }\n  }\n  function registerField(field) {\n    const fieldPath = unref(field.name);\n    insertFieldAtPath(field, fieldPath);\n    if (isRef(field.name)) {\n      // ensures when a field's name was already taken that it preserves its same value\n      // necessary for fields generated by loops\n      watch(field.name, async (newPath, oldPath) => {\n        // cache the value\n        await nextTick();\n        removeFieldFromPath(field, oldPath);\n        insertFieldAtPath(field, newPath);\n        // re-validate if either path had errors before\n        if (errors.value[oldPath] || errors.value[newPath]) {\n          // clear up both paths errors\n          setFieldError(oldPath, undefined);\n          validateField(newPath);\n        }\n        // clean up the old path if no other field is sharing that name\n        // #3325\n        await nextTick();\n        if (!fieldExists(oldPath)) {\n          unsetPath(formValues, oldPath);\n        }\n      });\n    }\n    // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\n    // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\n    // #3342\n    const initialErrorMessage = unref(field.errorMessage);\n    if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\n      validateField(fieldPath);\n    }\n    // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\n    delete initialErrors[fieldPath];\n  }\n  function unregisterField(field) {\n    const fieldName = unref(field.name);\n    removeFieldFromPath(field, fieldName);\n    nextTick(() => {\n      // clears a field error on unmounted\n      // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\n      // #3384\n      if (!fieldExists(fieldName)) {\n        setFieldError(fieldName, undefined);\n        unsetPath(formValues, fieldName);\n      }\n    });\n  }\n  async function validate(opts) {\n    if (formCtx.validateSchema) {\n      return formCtx.validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'force');\n    }\n    // No schema, each field is responsible to validate itself\n    const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\n      const fieldInstance = Array.isArray(field) ? field[0] : field;\n      if (!fieldInstance) {\n        return Promise.resolve({\n          key: '',\n          valid: true,\n          errors: []\n        });\n      }\n      return fieldInstance.validate(opts).then(result => {\n        return {\n          key: unref(fieldInstance.name),\n          valid: result.valid,\n          errors: result.errors\n        };\n      });\n    }));\n    const results = {};\n    const errors = {};\n    for (const validation of validations) {\n      results[validation.key] = {\n        valid: validation.valid,\n        errors: validation.errors\n      };\n      if (validation.errors.length) {\n        errors[validation.key] = validation.errors[0];\n      }\n    }\n    return {\n      valid: validations.every(r => r.valid),\n      results,\n      errors\n    };\n  }\n  async function validateField(field) {\n    const fieldInstance = fieldsByPath.value[field];\n    if (!fieldInstance) {\n      warn$1(`field with name ${field} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n    if (Array.isArray(fieldInstance)) {\n      return fieldInstance.map(f => f.validate())[0];\n    }\n    return fieldInstance.validate();\n  }\n  function handleSubmit(fn, onValidationError) {\n    return function submissionHandler(e) {\n      if (e instanceof Event) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      // Touch all fields\n      setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\n        acc[field] = true;\n        return acc;\n      }, {}));\n      isSubmitting.value = true;\n      submitCount.value++;\n      return validate().then(result => {\n        if (result.valid && typeof fn === 'function') {\n          return fn(klona(formValues), {\n            evt: e,\n            setErrors,\n            setFieldError,\n            setTouched,\n            setFieldTouched,\n            setValues,\n            setFieldValue,\n            resetForm\n          });\n        }\n        if (!result.valid && typeof onValidationError === 'function') {\n          onValidationError({\n            values: klona(formValues),\n            evt: e,\n            errors: result.errors,\n            results: result.results\n          });\n        }\n      }).then(returnVal => {\n        isSubmitting.value = false;\n        return returnVal;\n      }, err => {\n        isSubmitting.value = false;\n        // re-throw the err so it doesn't go silent\n        throw err;\n      });\n    };\n  }\n  function setFieldInitialValue(path, value) {\n    setInPath(initialValues.value, path, klona(value));\n  }\n  function unsetInitialValue(path) {\n    unsetPath(initialValues.value, path);\n  }\n  /**\r\n   * Sneaky function to set initial field values\r\n   */\n  function stageInitialValue(path, value) {\n    setInPath(formValues, path, value);\n    setFieldInitialValue(path, value);\n  }\n  async function _validateSchema() {\n    const schemaValue = unref(schema);\n    if (!schemaValue) {\n      return {\n        valid: true,\n        results: {},\n        errors: {}\n      };\n    }\n    const formResult = isYupValidator(schemaValue) ? await validateYupSchema(schemaValue, formValues) : await validateObjectSchema(schemaValue, formValues, {\n      names: fieldNames.value,\n      bailsMap: fieldBailsMap.value\n    });\n    return formResult;\n  }\n  /**\r\n   * Batches validation runs in 5ms batches\r\n   */\n  const debouncedSchemaValidation = debounceAsync(_validateSchema, 5);\n  async function validateSchema(mode) {\n    const formResult = await debouncedSchemaValidation();\n    // fields by id lookup\n    const fieldsById = formCtx.fieldsByPath.value || {};\n    // errors fields names, we need it to also check if custom errors are updated\n    const currentErrorsPaths = keysOf(formCtx.errorBag.value);\n    // collect all the keys from the schema and all fields\n    // this ensures we have a complete keymap of all the fields\n    const paths = [...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths])];\n    // aggregates the paths into a single result object while applying the results on the fields\n    return paths.reduce((validation, path) => {\n      const field = fieldsById[path];\n      const messages = (formResult.results[path] || {\n        errors: []\n      }).errors;\n      const fieldResult = {\n        errors: messages,\n        valid: !messages.length\n      };\n      validation.results[path] = fieldResult;\n      if (!fieldResult.valid) {\n        validation.errors[path] = fieldResult.errors[0];\n      }\n      // field not rendered\n      if (!field) {\n        setFieldError(path, messages);\n        return validation;\n      }\n      // always update the valid flag regardless of the mode\n      applyFieldMutation(field, f => f.meta.valid = fieldResult.valid);\n      if (mode === 'silent') {\n        return validation;\n      }\n      const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\n      if (mode === 'validated-only' && !wasValidated) {\n        return validation;\n      }\n      applyFieldMutation(field, f => f.setState({\n        errors: fieldResult.errors\n      }));\n      return validation;\n    }, {\n      valid: formResult.valid,\n      results: {},\n      errors: {}\n    });\n  }\n  const submitForm = handleSubmit((_, {\n    evt\n  }) => {\n    if (isFormSubmitEvent(evt)) {\n      evt.target.submit();\n    }\n  });\n  // Trigger initial validation\n  onMounted(() => {\n    if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n      setErrors(opts.initialErrors);\n    }\n    if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n      setTouched(opts.initialTouched);\n    }\n    // if validate on mount was enabled\n    if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n      validate();\n      return;\n    }\n    // otherwise run initial silent validation through schema if available\n    // the useField should skip their own silent validation if a yup schema is present\n    if (formCtx.validateSchema) {\n      formCtx.validateSchema('silent');\n    }\n  });\n  if (isRef(schema)) {\n    watch(schema, () => {\n      var _a;\n      (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n    });\n  }\n  // Provide injections\n  provide(FormContextKey, formCtx);\n  if (process.env.NODE_ENV !== 'production') {\n    registerFormWithDevTools(formCtx);\n    watch(() => Object.assign(Object.assign({\n      errors: errorBag.value\n    }, meta.value), {\n      values: formValues,\n      isSubmitting: isSubmitting.value,\n      submitCount: submitCount.value\n    }), refreshInspector, {\n      deep: true\n    });\n  }\n  return {\n    errors,\n    meta,\n    values: formValues,\n    isSubmitting,\n    submitCount,\n    validate,\n    validateField,\n    handleReset: () => resetForm(),\n    resetForm,\n    handleSubmit,\n    submitForm,\n    setFieldError,\n    setErrors,\n    setFieldValue,\n    setValues,\n    setFieldTouched,\n    setTouched\n  };\n}\n/**\r\n * Manages form meta aggregation\r\n */\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\n  const MERGE_STRATEGIES = {\n    touched: 'some',\n    pending: 'some',\n    valid: 'every'\n  };\n  const isDirty = computed(() => {\n    return !es6(currentValues, unref(initialValues));\n  });\n  function calculateFlags() {\n    const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\n    return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n      const mergeMethod = MERGE_STRATEGIES[flag];\n      acc[flag] = fields[mergeMethod](field => field.meta[flag]);\n      return acc;\n    }, {});\n  }\n  const flags = reactive(calculateFlags());\n  watchEffect(() => {\n    const value = calculateFlags();\n    flags.touched = value.touched;\n    flags.valid = value.valid;\n    flags.pending = value.pending;\n  });\n  return computed(() => {\n    return Object.assign(Object.assign({\n      initialValues: unref(initialValues)\n    }, flags), {\n      valid: flags.valid && !keysOf(errors.value).length,\n      dirty: isDirty.value\n    });\n  });\n}\n/**\r\n * Manages the initial values prop\r\n */\nfunction useFormInitialValues(fields, formValues, providedValues) {\n  // these are the mutable initial values as the fields are mounted/unmounted\n  const initialValues = ref(klona(unref(providedValues)) || {});\n  // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n  // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n  // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n  // so these are the values that the reset function should use\n  // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\n  const originalInitialValues = ref(klona(unref(providedValues)) || {});\n  function setInitialValues(values, updateFields = false) {\n    initialValues.value = klona(values);\n    originalInitialValues.value = klona(values);\n    if (!updateFields) {\n      return;\n    }\n    // update the pristine non-touched fields\n    // those are excluded because it's unlikely you want to change the form values using initial values\n    // we mostly watch them for API population or newly inserted fields\n    // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n    keysOf(fields.value).forEach(fieldPath => {\n      const field = fields.value[fieldPath];\n      const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\n      if (!field || wasTouched) {\n        return;\n      }\n      const newValue = getFromPath(initialValues.value, fieldPath);\n      setInPath(formValues, fieldPath, klona(newValue));\n    });\n  }\n  if (isRef(providedValues)) {\n    watch(providedValues, value => {\n      setInitialValues(value, true);\n    }, {\n      deep: true\n    });\n  }\n  return {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  };\n}\nfunction useErrorBag(initialErrors) {\n  const errorBag = ref({});\n  function normalizeErrorItem(message) {\n    return Array.isArray(message) ? message : message ? [message] : [];\n  }\n  /**\r\n   * Manually sets an error message on a specific field\r\n   */\n  function setFieldErrorBag(field, message) {\n    if (!message) {\n      delete errorBag.value[field];\n      return;\n    }\n    errorBag.value[field] = normalizeErrorItem(message);\n  }\n  /**\r\n   * Sets errors for the fields specified in the object\r\n   */\n  function setErrorBag(fields) {\n    errorBag.value = keysOf(fields).reduce((acc, key) => {\n      const message = fields[key];\n      if (message) {\n        acc[key] = normalizeErrorItem(message);\n      }\n      return acc;\n    }, {});\n  }\n  if (initialErrors) {\n    setErrorBag(initialErrors);\n  }\n  return {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  };\n}\nconst FormImpl = defineComponent({\n  name: 'Form',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: String,\n      default: 'form'\n    },\n    validationSchema: {\n      type: Object,\n      default: undefined\n    },\n    initialValues: {\n      type: Object,\n      default: undefined\n    },\n    initialErrors: {\n      type: Object,\n      default: undefined\n    },\n    initialTouched: {\n      type: Object,\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    onSubmit: {\n      type: Function,\n      default: undefined\n    },\n    onInvalidSubmit: {\n      type: Function,\n      default: undefined\n    }\n  },\n  setup(props, ctx) {\n    const initialValues = toRef(props, 'initialValues');\n    const validationSchema = toRef(props, 'validationSchema');\n    const {\n      errors,\n      values,\n      meta,\n      isSubmitting,\n      submitCount,\n      validate,\n      validateField,\n      handleReset,\n      resetForm,\n      handleSubmit,\n      submitForm,\n      setErrors,\n      setFieldError,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched\n    } = useForm({\n      validationSchema: validationSchema.value ? validationSchema : undefined,\n      initialValues,\n      initialErrors: props.initialErrors,\n      initialTouched: props.initialTouched,\n      validateOnMount: props.validateOnMount\n    });\n    const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n    function handleFormReset(e) {\n      if (isEvent(e)) {\n        // Prevent default form reset behavior\n        e.preventDefault();\n      }\n      handleReset();\n      if (typeof ctx.attrs.onReset === 'function') {\n        ctx.attrs.onReset();\n      }\n    }\n    function handleScopedSlotSubmit(evt, onSubmit) {\n      const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n      return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n    }\n    function slotProps() {\n      return {\n        meta: meta.value,\n        errors: errors.value,\n        values: values,\n        isSubmitting: isSubmitting.value,\n        submitCount: submitCount.value,\n        validate,\n        validateField,\n        handleSubmit: handleScopedSlotSubmit,\n        handleReset,\n        submitForm,\n        setErrors,\n        setFieldError,\n        setFieldValue,\n        setValues,\n        setFieldTouched,\n        setTouched,\n        resetForm\n      };\n    }\n    // expose these functions and methods as part of public API\n    ctx.expose({\n      setFieldError,\n      setErrors,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched,\n      resetForm,\n      validate,\n      validateField\n    });\n    return function renderForm() {\n      // avoid resolving the form component as itself\n      const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\n      const children = normalizeChildren(tag, ctx, slotProps);\n      if (!props.as) {\n        return children;\n      }\n      // Attributes to add on a native `form` tag\n      const formAttrs = props.as === 'form' ? {\n        // Disables native validation as vee-validate will handle it.\n        novalidate: true\n      } : {};\n      return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), {\n        onSubmit,\n        onReset: handleFormReset\n      }), children);\n    };\n  }\n});\nconst Form = FormImpl;\nlet FIELD_ARRAY_COUNTER = 0;\nfunction useFieldArray(arrayPath) {\n  const id = FIELD_ARRAY_COUNTER++;\n  const form = injectWithSelf(FormContextKey, undefined);\n  const fields = ref([]);\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  const noOp = () => {};\n  const noOpApi = {\n    fields: readonly(fields),\n    remove: noOp,\n    push: noOp,\n    swap: noOp,\n    insert: noOp,\n    update: noOp,\n    replace: noOp,\n    prepend: noOp\n  };\n  if (!form) {\n    warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n    return noOpApi;\n  }\n  if (!unref(arrayPath)) {\n    warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n    return noOpApi;\n  }\n  let entryCounter = 0;\n  function initFields() {\n    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\n    fields.value = currentValues.map(createEntry);\n    updateEntryFlags();\n  }\n  initFields();\n  function updateEntryFlags() {\n    const fieldsLength = fields.value.length;\n    for (let i = 0; i < fieldsLength; i++) {\n      const entry = fields.value[i];\n      entry.isFirst = i === 0;\n      entry.isLast = i === fieldsLength - 1;\n    }\n  }\n  function createEntry(value) {\n    const key = entryCounter++;\n    const entry = {\n      key,\n      value: computed(() => {\n        const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\n        const idx = fields.value.findIndex(e => e.key === key);\n        return idx === -1 ? value : currentValues[idx];\n      }),\n      isFirst: false,\n      isLast: false\n    };\n    return entry;\n  }\n  function remove(idx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!pathValue || !Array.isArray(pathValue)) {\n      return;\n    }\n    const newValue = [...pathValue];\n    newValue.splice(idx, 1);\n    form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.splice(idx, 1);\n    updateEntryFlags();\n  }\n  function push(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n    const newValue = [...normalizedPathValue];\n    newValue.push(value);\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.push(createEntry(value));\n    updateEntryFlags();\n  }\n  function swap(indexA, indexB) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n      return;\n    }\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    // the old switcheroo\n    const temp = newValue[indexA];\n    newValue[indexA] = newValue[indexB];\n    newValue[indexB] = temp;\n    const tempEntry = newFields[indexA];\n    newFields[indexA] = newFields[indexB];\n    newFields[indexB] = tempEntry;\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n  function insert(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || pathValue.length < idx) {\n      return;\n    }\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    newValue.splice(idx, 0, value);\n    newFields.splice(idx, 0, createEntry(value));\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n  function replace(arr) {\n    const pathName = unref(arrayPath);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\n    initFields();\n  }\n  function update(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n      return;\n    }\n    form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\n  }\n  function prepend(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n    const newValue = [value, ...normalizedPathValue];\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.unshift(createEntry(value));\n    updateEntryFlags();\n  }\n  form.fieldArraysLookup[id] = {\n    reset: initFields\n  };\n  onBeforeUnmount(() => {\n    delete form.fieldArraysLookup[id];\n  });\n  return {\n    fields: readonly(fields),\n    remove,\n    push,\n    swap,\n    insert,\n    update,\n    replace,\n    prepend\n  };\n}\nconst FieldArrayImpl = defineComponent({\n  name: 'FieldArray',\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props, ctx) {\n    const {\n      push,\n      remove,\n      swap,\n      insert,\n      replace,\n      update,\n      prepend,\n      fields\n    } = useFieldArray(toRef(props, 'name'));\n    function slotProps() {\n      return {\n        fields: fields.value,\n        push,\n        remove,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend\n      };\n    }\n    ctx.expose({\n      push,\n      remove,\n      swap,\n      insert,\n      update,\n      replace,\n      prepend\n    });\n    return () => {\n      const children = normalizeChildren(undefined, ctx, slotProps);\n      return children;\n    };\n  }\n});\nconst FieldArray = FieldArrayImpl;\nconst ErrorMessageImpl = defineComponent({\n  name: 'ErrorMessage',\n  props: {\n    as: {\n      type: String,\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props, ctx) {\n    const form = inject(FormContextKey, undefined);\n    const message = computed(() => {\n      return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n    });\n    function slotProps() {\n      return {\n        message: message.value\n      };\n    }\n    return () => {\n      // Renders nothing if there are no messages\n      if (!message.value) {\n        return undefined;\n      }\n      const tag = props.as ? resolveDynamicComponent(props.as) : props.as;\n      const children = normalizeChildren(tag, ctx, slotProps);\n      const attrs = Object.assign({\n        role: 'alert'\n      }, ctx.attrs);\n      // If no tag was specified and there are children\n      // render the slot as is without wrapping it\n      if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n        return children;\n      }\n      // If no children in slot\n      // render whatever specified and fallback to a <span> with the message in it's contents\n      if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n        return h(tag || 'span', attrs, message.value);\n      }\n      return h(tag, attrs, children);\n    };\n  }\n});\nconst ErrorMessage = ErrorMessageImpl;\nfunction useResetForm() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return function resetForm(state) {\n    if (!form) {\n      return;\n    }\n    return form.resetForm(state);\n  };\n}\n\n/**\r\n * If a field is dirty or not\r\n */\nfunction useIsFieldDirty(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n    return field.meta.dirty;\n  });\n}\n\n/**\r\n * If a field is touched or not\r\n */\nfunction useIsFieldTouched(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n    return field.meta.touched;\n  });\n}\n\n/**\r\n * If a field is validated and is valid\r\n */\nfunction useIsFieldValid(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n    return field.meta.valid;\n  });\n}\n\n/**\r\n * If the form is submitting or not\r\n */\nfunction useIsSubmitting() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\r\n * Validates a single field\r\n */\nfunction useValidateField(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return function validateField() {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n    return field.validate();\n  };\n}\n\n/**\r\n * If the form is dirty or not\r\n */\nfunction useIsFormDirty() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\r\n * If the form is touched or not\r\n */\nfunction useIsFormTouched() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\r\n * If the form has been validated and is valid\r\n */\nfunction useIsFormValid() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\r\n * Validate multiple fields\r\n */\nfunction useValidateForm() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return function validateField() {\n    if (!form) {\n      return Promise.resolve({\n        results: {},\n        errors: {},\n        valid: true\n      });\n    }\n    return form.validate();\n  };\n}\n\n/**\r\n * The number of form's submission count\r\n */\nfunction useSubmitCount() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n  });\n}\n\n/**\r\n * Gives access to a field's current value\r\n */\nfunction useFieldValue(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\n    }\n    return unref(field === null || field === void 0 ? void 0 : field.value);\n  });\n}\n\n/**\r\n * Gives access to a form's values\r\n */\nfunction useFormValues() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.values) || {};\n  });\n}\n\n/**\r\n * Gives access to all form errors\r\n */\nfunction useFormErrors() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.errors.value) || {};\n  });\n}\n\n/**\r\n * Gives access to a single field error\r\n */\nfunction useFieldError(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\n    }\n    return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n  });\n}\nfunction useSubmitForm(cb) {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  const onSubmit = form ? form.handleSubmit(cb) : undefined;\n  return function submitForm(e) {\n    if (!onSubmit) {\n      return;\n    }\n    return onSubmit(e);\n  };\n}\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };","map":{"version":3,"names":["inject","getCurrentInstance","warn","warn$1","ref","unref","computed","reactive","watch","onUnmounted","nextTick","onMounted","provide","isRef","onBeforeUnmount","defineComponent","toRef","resolveDynamicComponent","h","watchEffect","markRaw","readonly","setupDevtoolsPlugin","isCallable","fn","isNullOrUndefined","value","undefined","isObject","obj","Array","isArray","isIndex","Number","toNumber","n","parseFloat","isNaN","RULES","defineRule","id","validator","guardExtend","resolveRule","Error","FormContextKey","Symbol","FieldContextKey","IS_ABSENT","isLocator","__locatorRef","isHTMLTag","tag","includes","isFileInputNode","attrs","type","isYupValidator","validate","hasCheckedAttr","isContainerValue","isEmptyContainer","length","Object","keys","isNotNestedPath","path","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","hasTruthyBindingValue","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","target","Event","srcElement","isPropPresent","prop","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","split","filter","Boolean","reduce","acc","propKey","setInPath","i","unset","key","splice","unsetPath","pathValues","map","_","idx","slice","join","keysOf","record","injectWithSelf","symbol","def","vm","provides","message","normalizeField","field","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","indexOf","push","throttle","func","limit","inThrottle","lastResult","args","context","setTimeout","apply","debounceAsync","inner","ms","timer","resolves","window","clearTimeout","result","forEach","r","Promise","resolve","normalizeChildren","slotProps","slots","default","_a","_b","call","getBoundValue","hasValueBinding","_value","normalizeEventValue","input","files","from","options","opt","selected","disabled","selectedOption","find","normalizeRules","rules","defineProperty","writable","enumerable","configurable","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","name","provided","mapValueToLocator","createLocator","RegExp","locator","crossTable","val","extractLocators","DEFAULT_CONFIG","generateMessage","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","setConfig","newConf","configure","shouldBail","formData","values","_validate","errors","valid","validateFieldWithYup","ctx","form","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","error","opts","abortEarly","then","catch","err","fillTargetValues","fieldCtx","normalize","param","validateYupSchema","schema","errorObjects","results","messages","validateObjectSchema","paths","validations","_c","fieldResult","names","bailsMap","isAllValid","validationResults","all","set","klona","get","x","k","list","tmp","str","prototype","toString","create","__proto__","Set","add","Map","Date","source","flags","constructor","buffer","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyNames","hasOwnProperty","es6","equal","a","b","size","entries","has","ArrayBuffer","isView","valueOf","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","modelValue","standalone","errorMessage","setErrors","_useFieldErrors","meta","_useFieldMeta","MAX_SAFE_INTEGER","setState","state","touched","shouldInjectForm","modelRef","resolveInitialValue","initialValues","setFieldInitialValue","stageInitialValue","setFieldValue","pending","validated","dirty","immediate","flush","normalizeErrors","errorBag","setFieldErrorBag","installDevtoolsPlugin","app","process","env","NODE_ENV","label","packageName","homepage","logo","setupApiHooks","DEVTOOLS_FORMS","DEVTOOLS_FIELDS","API","refreshInspector","sendInspectorState","INSPECTOR_ID","sendInspectorTree","registerFormWithDevTools","appContext","formId","_vm","registerSingleFieldWithDevtools","COLORS","success","unknown","white","black","blue","purple","orange","gray","SELECTED_NODE","api","addInspector","icon","noSelectionText","actions","tooltip","action","console","log","resetField","resetForm","on","getInspectorTree","payload","inspectorId","forms","fields","rootNodes","mapFormForDevtoolsInspector","mapFieldForDevtoolsInspector","getInspectorState","currentTab","decodeNodeId","nodeId","buildFormState","buildFieldState","textColor","bgColor","getTagTheme","formTreeNodes","fieldsByPath","fieldInstance","buildFormTree","tree","pop","children","c","String","encodeNodeId","tags","backgroundColor","isGroup","fieldItem","encodeIndex","fieldPath","fieldGroup","idObject","f","ff","btoa","JSON","stringify","parse","atob","isSubmitting","submitCount","fieldOrForm","useField","useCheckboxField","_useField","validateOnMount","validateOnValueUpdate","normalizeOptions","handleBlur","normalizedRules","rulesValue","extractRuleFromSchema","validateCurrentValue","mode","validateSchema","validateWithStateMutation","validateValidStateOnly","validate$1","handleChange","e","shouldValidate","newValue","setTouched","isTouched","unwatchValue","watchValue","deep","setValue","handleReset","oldValue","register","unregister","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","defaults","valueProp","fieldName","patchCheckboxApi","checked","checkedVal","handleCheckboxChange","FieldImpl","inheritAttrs","props","as","required","Function","modelModifiers","setup","hasModelEvents","validateField","onChangeHandler","handleChangeWithModel","emit","handleInput","onInputHandler","handleInputWithModel","fieldProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","resolveTag","newModelValue","applyModifiers","expose","reset","_d","modifiers","number","Field","FORM_COUNTER","useForm","RESET_LOCK","fieldArraysLookup","formValues","setErrorBag","useErrorBag","initialErrors","bag","getFirstFieldAtPath","fieldOrGroup","fieldExists","fieldNames","fieldBailsMap","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","validationSchema","formCtx","registerField","unregisterField","setValues","setFieldError","setFieldTouched","handleSubmit","unsetInitialValue","isFieldGroup","applyFieldMutation","mutation","force","clonedValue","insertFieldAtPath","rawField","fieldAtPath","removeFieldFromPath","findIndex","newPath","oldPath","initialErrorMessage","validation","every","onValidationError","submissionHandler","preventDefault","stopPropagation","returnVal","_validateSchema","schemaValue","formResult","debouncedSchemaValidation","fieldsById","currentErrorsPaths","wasValidated","some","submitForm","submit","initialTouched","currentValues","MERGE_STRATEGIES","isDirty","calculateFlags","flat","flag","mergeMethod","providedValues","updateFields","wasTouched","normalizeErrorItem","FormImpl","onSubmit","onInvalidSubmit","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","renderForm","formAttrs","novalidate","Form","FIELD_ARRAY_COUNTER","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","entryCounter","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","pathName","pathValue","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","arr","unshift","FieldArrayImpl","FieldArray","ErrorMessageImpl","role","ErrorMessage","useResetForm","useIsFieldDirty","useIsFieldTouched","useIsFieldValid","useIsSubmitting","useValidateField","useIsFormDirty","useIsFormTouched","useIsFormValid","useValidateForm","useSubmitCount","useFieldValue","useFormValues","useFormErrors","useFieldError","useSubmitForm","cb"],"sources":["/home/vando/vue-br/feedback-app/node_modules/vee-validate/dist/vee-validate.esm.js"],"sourcesContent":["/**\n  * vee-validate v4.5.8\n  * (c) 2022 Abdelrahman Awad\n  * @license MIT\n  */\nimport { inject, getCurrentInstance, warn as warn$1, ref, unref, computed, reactive, watch, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw, readonly } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\r\n    return typeof fn === 'function';\r\n}\r\nfunction isNullOrUndefined(value) {\r\n    return value === null || value === undefined;\r\n}\r\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\r\nfunction isIndex(value) {\r\n    return Number(value) >= 0;\r\n}\r\nfunction toNumber(value) {\r\n    const n = parseFloat(value);\r\n    return isNaN(n) ? value : n;\r\n}\n\nconst RULES = {};\r\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\r\nfunction defineRule(id, validator) {\r\n    // makes sure new rules are properly formatted.\r\n    guardExtend(id, validator);\r\n    RULES[id] = validator;\r\n}\r\n/**\r\n * Gets an already defined rule\r\n */\r\nfunction resolveRule(id) {\r\n    return RULES[id];\r\n}\r\n/**\r\n * Guards from extension violations.\r\n */\r\nfunction guardExtend(id, validator) {\r\n    if (isCallable(validator)) {\r\n        return;\r\n    }\r\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\r\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\r\nconst FieldContextKey = Symbol('vee-validate-field-instance');\r\nconst IS_ABSENT = Symbol('Default empty value');\n\nfunction isLocator(value) {\r\n    return isCallable(value) && !!value.__locatorRef;\r\n}\r\n/**\r\n * Checks if an tag name is a native HTML tag and not a Vue component\r\n */\r\nfunction isHTMLTag(tag) {\r\n    return ['input', 'textarea', 'select'].includes(tag);\r\n}\r\n/**\r\n * Checks if an input is of type file\r\n */\r\nfunction isFileInputNode(tag, attrs) {\r\n    return isHTMLTag(tag) && attrs.type === 'file';\r\n}\r\nfunction isYupValidator(value) {\r\n    return !!value && isCallable(value.validate);\r\n}\r\nfunction hasCheckedAttr(type) {\r\n    return type === 'checkbox' || type === 'radio';\r\n}\r\nfunction isContainerValue(value) {\r\n    return isObject(value) || Array.isArray(value);\r\n}\r\n/**\r\n * True if the value is an empty object or array\r\n */\r\nfunction isEmptyContainer(value) {\r\n    if (Array.isArray(value)) {\r\n        return value.length === 0;\r\n    }\r\n    return isObject(value) && Object.keys(value).length === 0;\r\n}\r\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\r\nfunction isNotNestedPath(path) {\r\n    return /^\\[.+\\]$/i.test(path);\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\r\nfunction isNativeMultiSelect(el) {\r\n    return isNativeSelect(el) && el.multiple;\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\r\nfunction isNativeSelect(el) {\r\n    return el.tagName === 'SELECT';\r\n}\r\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\r\nfunction isNativeMultiSelectNode(tag, attrs) {\r\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\r\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\r\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\r\n}\r\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\r\nfunction shouldHaveValueBinding(tag, attrs) {\r\n    return isNativeMultiSelectNode(tag, attrs) || isFileInputNode(tag, attrs);\r\n}\r\nfunction isFormSubmitEvent(evt) {\r\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\r\n}\r\nfunction isEvent(evt) {\r\n    if (!evt) {\r\n        return false;\r\n    }\r\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\r\n        return true;\r\n    }\r\n    // this is for IE and Cypress #3161\r\n    /* istanbul ignore next */\r\n    if (evt && evt.srcElement) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropPresent(obj, prop) {\r\n    return prop in obj && obj[prop] !== IS_ABSENT;\r\n}\n\nfunction cleanupNonNestedPath(path) {\r\n    if (isNotNestedPath(path)) {\r\n        return path.replace(/\\[|\\]/gi, '');\r\n    }\r\n    return path;\r\n}\r\nfunction getFromPath(object, path, fallback) {\r\n    if (!object) {\r\n        return fallback;\r\n    }\r\n    if (isNotNestedPath(path)) {\r\n        return object[cleanupNonNestedPath(path)];\r\n    }\r\n    const resolvedValue = (path || '')\r\n        .split(/\\.|\\[(\\d+)\\]/)\r\n        .filter(Boolean)\r\n        .reduce((acc, propKey) => {\r\n        if (isContainerValue(acc) && propKey in acc) {\r\n            return acc[propKey];\r\n        }\r\n        return fallback;\r\n    }, object);\r\n    return resolvedValue;\r\n}\r\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\r\nfunction setInPath(object, path, value) {\r\n    if (isNotNestedPath(path)) {\r\n        object[cleanupNonNestedPath(path)] = value;\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, set it\r\n        if (i === keys.length - 1) {\r\n            acc[keys[i]] = value;\r\n            return;\r\n        }\r\n        // Key does not exist, create a container for it\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            // container can be either an object or an array depending on the next key if it exists\r\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n}\r\nfunction unset(object, key) {\r\n    if (Array.isArray(object) && isIndex(key)) {\r\n        object.splice(Number(key), 1);\r\n        return;\r\n    }\r\n    if (isObject(object)) {\r\n        delete object[key];\r\n    }\r\n}\r\n/**\r\n * Removes a nested property from object\r\n */\r\nfunction unsetPath(object, path) {\r\n    if (isNotNestedPath(path)) {\r\n        delete object[cleanupNonNestedPath(path)];\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, unset it\r\n        if (i === keys.length - 1) {\r\n            unset(acc, keys[i]);\r\n            break;\r\n        }\r\n        // Key does not exist, exit\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            break;\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n    const pathValues = keys.map((_, idx) => {\r\n        return getFromPath(object, keys.slice(0, idx).join('.'));\r\n    });\r\n    for (let i = pathValues.length - 1; i >= 0; i--) {\r\n        if (!isEmptyContainer(pathValues[i])) {\r\n            continue;\r\n        }\r\n        if (i === 0) {\r\n            unset(object, keys[0]);\r\n            continue;\r\n        }\r\n        unset(pathValues[i - 1], keys[i - 1]);\r\n    }\r\n}\r\n/**\r\n * A typed version of Object.keys\r\n */\r\nfunction keysOf(record) {\r\n    return Object.keys(record);\r\n}\r\n// Uses same component provide as its own injections\r\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\r\nfunction injectWithSelf(symbol, def = undefined) {\r\n    const vm = getCurrentInstance();\r\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\r\n}\r\nfunction warn(message) {\r\n    warn$1(`[vee-validate]: ${message}`);\r\n}\r\n/**\r\n * Ensures we deal with a singular field value\r\n */\r\nfunction normalizeField(field) {\r\n    if (Array.isArray(field)) {\r\n        return field[0];\r\n    }\r\n    return field;\r\n}\r\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\r\n    if (Array.isArray(currentValue)) {\r\n        const newVal = [...currentValue];\r\n        const idx = newVal.indexOf(checkedValue);\r\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\r\n        return newVal;\r\n    }\r\n    return currentValue === checkedValue ? uncheckedValue : checkedValue;\r\n}\r\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\r\nfunction throttle(func, limit) {\r\n    let inThrottle;\r\n    let lastResult;\r\n    return function (...args) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const context = this;\r\n        if (!inThrottle) {\r\n            inThrottle = true;\r\n            setTimeout(() => (inThrottle = false), limit);\r\n            lastResult = func.apply(context, args);\r\n        }\r\n        return lastResult;\r\n    };\r\n}\r\nfunction debounceAsync(inner, ms = 0) {\r\n    let timer = null;\r\n    let resolves = [];\r\n    return function (...args) {\r\n        // Run the function after a certain amount of time\r\n        if (timer) {\r\n            window.clearTimeout(timer);\r\n        }\r\n        timer = window.setTimeout(() => {\r\n            // Get the result of the inner function, then apply it to the resolve function of\r\n            // each promise that has been created since the last time the inner function was run\r\n            const result = inner(...args);\r\n            resolves.forEach(r => r(result));\r\n            resolves = [];\r\n        }, ms);\r\n        return new Promise(resolve => resolves.push(resolve));\r\n    };\r\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst normalizeChildren = (tag, context, slotProps) => {\r\n    if (!context.slots.default) {\r\n        return context.slots.default;\r\n    }\r\n    if (typeof tag === 'string' || !tag) {\r\n        return context.slots.default(slotProps());\r\n    }\r\n    return {\r\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\r\n    };\r\n};\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction getBoundValue(el) {\r\n    if (hasValueBinding(el)) {\r\n        return el._value;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction hasValueBinding(el) {\r\n    return '_value' in el;\r\n}\n\nfunction normalizeEventValue(value) {\r\n    if (!isEvent(value)) {\r\n        return value;\r\n    }\r\n    const input = value.target;\r\n    // Vue sets the current bound value on `_value` prop\r\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\r\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\r\n        return getBoundValue(input);\r\n    }\r\n    if (input.type === 'file' && input.files) {\r\n        return Array.from(input.files);\r\n    }\r\n    if (isNativeMultiSelect(input)) {\r\n        return Array.from(input.options)\r\n            .filter(opt => opt.selected && !opt.disabled)\r\n            .map(getBoundValue);\r\n    }\r\n    // makes sure we get the actual `option` bound value\r\n    // #3440\r\n    if (isNativeSelect(input)) {\r\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\r\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\r\n    }\r\n    return input.value;\r\n}\n\n/**\r\n * Normalizes the given rules expression.\r\n */\r\nfunction normalizeRules(rules) {\r\n    const acc = {};\r\n    Object.defineProperty(acc, '_$$isNormalized', {\r\n        value: true,\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false,\r\n    });\r\n    if (!rules) {\r\n        return acc;\r\n    }\r\n    // Object is already normalized, skip.\r\n    if (isObject(rules) && rules._$$isNormalized) {\r\n        return rules;\r\n    }\r\n    if (isObject(rules)) {\r\n        return Object.keys(rules).reduce((prev, curr) => {\r\n            const params = normalizeParams(rules[curr]);\r\n            if (rules[curr] !== false) {\r\n                prev[curr] = buildParams(params);\r\n            }\r\n            return prev;\r\n        }, acc);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (typeof rules !== 'string') {\r\n        return acc;\r\n    }\r\n    return rules.split('|').reduce((prev, rule) => {\r\n        const parsedRule = parseRule(rule);\r\n        if (!parsedRule.name) {\r\n            return prev;\r\n        }\r\n        prev[parsedRule.name] = buildParams(parsedRule.params);\r\n        return prev;\r\n    }, acc);\r\n}\r\n/**\r\n * Normalizes a rule param.\r\n */\r\nfunction normalizeParams(params) {\r\n    if (params === true) {\r\n        return [];\r\n    }\r\n    if (Array.isArray(params)) {\r\n        return params;\r\n    }\r\n    if (isObject(params)) {\r\n        return params;\r\n    }\r\n    return [params];\r\n}\r\nfunction buildParams(provided) {\r\n    const mapValueToLocator = (value) => {\r\n        // A target param using interpolation\r\n        if (typeof value === 'string' && value[0] === '@') {\r\n            return createLocator(value.slice(1));\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(provided)) {\r\n        return provided.map(mapValueToLocator);\r\n    }\r\n    // #3073\r\n    if (provided instanceof RegExp) {\r\n        return [provided];\r\n    }\r\n    return Object.keys(provided).reduce((prev, key) => {\r\n        prev[key] = mapValueToLocator(provided[key]);\r\n        return prev;\r\n    }, {});\r\n}\r\n/**\r\n * Parses a rule string expression.\r\n */\r\nconst parseRule = (rule) => {\r\n    let params = [];\r\n    const name = rule.split(':')[0];\r\n    if (rule.includes(':')) {\r\n        params = rule.split(':').slice(1).join(':').split(',');\r\n    }\r\n    return { name, params };\r\n};\r\nfunction createLocator(value) {\r\n    const locator = (crossTable) => {\r\n        const val = getFromPath(crossTable, value) || crossTable[value];\r\n        return val;\r\n    };\r\n    locator.__locatorRef = value;\r\n    return locator;\r\n}\r\nfunction extractLocators(params) {\r\n    if (Array.isArray(params)) {\r\n        return params.filter(isLocator);\r\n    }\r\n    return keysOf(params)\r\n        .filter(key => isLocator(params[key]))\r\n        .map(key => params[key]);\r\n}\n\nconst DEFAULT_CONFIG = {\r\n    generateMessage: ({ field }) => `${field} is not valid.`,\r\n    bails: true,\r\n    validateOnBlur: true,\r\n    validateOnChange: true,\r\n    validateOnInput: false,\r\n    validateOnModelUpdate: true,\r\n};\r\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\r\nconst getConfig = () => currentConfig;\r\nconst setConfig = (newConf) => {\r\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\r\n};\r\nconst configure = setConfig;\n\n/**\r\n * Validates a value against the rules.\r\n */\r\nasync function validate(value, rules, options = {}) {\r\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\r\n    const field = {\r\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\r\n        rules,\r\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\r\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\r\n    };\r\n    const result = await _validate(field, value);\r\n    const errors = result.errors;\r\n    return {\r\n        errors,\r\n        valid: !errors.length,\r\n    };\r\n}\r\n/**\r\n * Starts the validation process.\r\n */\r\nasync function _validate(field, value) {\r\n    if (isYupValidator(field.rules)) {\r\n        return validateFieldWithYup(value, field.rules, { bails: field.bails });\r\n    }\r\n    // if a generic function, use it as the pipeline.\r\n    if (isCallable(field.rules)) {\r\n        const ctx = {\r\n            field: field.name,\r\n            form: field.formData,\r\n            value: value,\r\n        };\r\n        const result = await field.rules(value, ctx);\r\n        const isValid = typeof result !== 'string' && result;\r\n        const message = typeof result === 'string' ? result : _generateFieldError(ctx);\r\n        return {\r\n            errors: !isValid ? [message] : [],\r\n        };\r\n    }\r\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\r\n    const errors = [];\r\n    const rulesKeys = Object.keys(normalizedContext.rules);\r\n    const length = rulesKeys.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const rule = rulesKeys[i];\r\n        const result = await _test(normalizedContext, value, {\r\n            name: rule,\r\n            params: normalizedContext.rules[rule],\r\n        });\r\n        if (result.error) {\r\n            errors.push(result.error);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Handles yup validation\r\n */\r\nasync function validateFieldWithYup(value, validator, opts) {\r\n    var _a;\r\n    const errors = await validator\r\n        .validate(value, {\r\n        abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true,\r\n    })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name === 'ValidationError') {\r\n            return err.errors;\r\n        }\r\n        // re-throw the error so we don't hide it\r\n        throw err;\r\n    });\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Tests a single input value against a rule.\r\n */\r\nasync function _test(field, value, rule) {\r\n    const validator = resolveRule(rule.name);\r\n    if (!validator) {\r\n        throw new Error(`No such validator '${rule.name}' exists.`);\r\n    }\r\n    const params = fillTargetValues(rule.params, field.formData);\r\n    const ctx = {\r\n        field: field.name,\r\n        value,\r\n        form: field.formData,\r\n        rule: Object.assign(Object.assign({}, rule), { params }),\r\n    };\r\n    const result = await validator(value, params, ctx);\r\n    if (typeof result === 'string') {\r\n        return {\r\n            error: result,\r\n        };\r\n    }\r\n    return {\r\n        error: result ? undefined : _generateFieldError(ctx),\r\n    };\r\n}\r\n/**\r\n * Generates error messages.\r\n */\r\nfunction _generateFieldError(fieldCtx) {\r\n    const message = getConfig().generateMessage;\r\n    if (!message) {\r\n        return 'Field is invalid';\r\n    }\r\n    return message(fieldCtx);\r\n}\r\nfunction fillTargetValues(params, crossTable) {\r\n    const normalize = (value) => {\r\n        if (isLocator(value)) {\r\n            return value(crossTable);\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(params)) {\r\n        return params.map(normalize);\r\n    }\r\n    return Object.keys(params).reduce((acc, param) => {\r\n        acc[param] = normalize(params[param]);\r\n        return acc;\r\n    }, {});\r\n}\r\nasync function validateYupSchema(schema, values) {\r\n    const errorObjects = await schema\r\n        .validate(values, { abortEarly: false })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name !== 'ValidationError') {\r\n            throw err;\r\n        }\r\n        // list of aggregated errors\r\n        return err.inner || [];\r\n    });\r\n    const results = {};\r\n    const errors = {};\r\n    for (const error of errorObjects) {\r\n        const messages = error.errors;\r\n        results[error.path] = { valid: !messages.length, errors: messages };\r\n        if (messages.length) {\r\n            errors[error.path] = messages[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: !errorObjects.length,\r\n        results,\r\n        errors,\r\n    };\r\n}\r\nasync function validateObjectSchema(schema, values, opts) {\r\n    const paths = keysOf(schema);\r\n    const validations = paths.map(async (path) => {\r\n        var _a, _b, _c;\r\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\r\n            name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\r\n            values: values,\r\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\r\n        });\r\n        return Object.assign(Object.assign({}, fieldResult), { path });\r\n    });\r\n    let isAllValid = true;\r\n    const validationResults = await Promise.all(validations);\r\n    const results = {};\r\n    const errors = {};\r\n    for (const result of validationResults) {\r\n        results[result.path] = {\r\n            valid: result.valid,\r\n            errors: result.errors,\r\n        };\r\n        if (!result.valid) {\r\n            isAllValid = false;\r\n            errors[result.path] = result.errors[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: isAllValid,\r\n        results,\r\n        errors,\r\n    };\r\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nvar es6 = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n    if ((a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      for (i of a.entries())\n        if (!equal(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n\n    if ((a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\nlet ID_COUNTER = 0;\r\nfunction useFieldState(path, init) {\r\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, !init.standalone);\r\n    const { errorMessage, errors, setErrors } = _useFieldErrors(path, !init.standalone);\r\n    const meta = _useFieldMeta(value, initialValue, errors);\r\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\r\n    function setState(state) {\r\n        var _a;\r\n        if ('value' in state) {\r\n            value.value = state.value;\r\n        }\r\n        if ('errors' in state) {\r\n            setErrors(state.errors);\r\n        }\r\n        if ('touched' in state) {\r\n            meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\r\n        }\r\n        if ('initialValue' in state) {\r\n            setInitialValue(state.initialValue);\r\n        }\r\n    }\r\n    return {\r\n        id,\r\n        path,\r\n        value,\r\n        initialValue,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        setState,\r\n    };\r\n}\r\n/**\r\n * Creates the field value and resolves the initial value\r\n */\r\nfunction _useFieldValue(path, modelValue, shouldInjectForm) {\r\n    const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    const modelRef = ref(unref(modelValue));\r\n    function resolveInitialValue() {\r\n        if (!form) {\r\n            return unref(modelRef);\r\n        }\r\n        return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\r\n    }\r\n    function setInitialValue(value) {\r\n        if (!form) {\r\n            modelRef.value = value;\r\n            return;\r\n        }\r\n        form.setFieldInitialValue(unref(path), value);\r\n    }\r\n    const initialValue = computed(resolveInitialValue);\r\n    // if no form is associated, use a regular ref.\r\n    if (!form) {\r\n        const value = ref(resolveInitialValue());\r\n        return {\r\n            value,\r\n            initialValue,\r\n            setInitialValue,\r\n        };\r\n    }\r\n    // to set the initial value, first check if there is a current value, if there is then use it.\r\n    // otherwise use the configured initial value if it exists.\r\n    // prioritize model value over form values\r\n    // #3429\r\n    const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\r\n    form.stageInitialValue(unref(path), currentValue);\r\n    // otherwise use a computed setter that triggers the `setFieldValue`\r\n    const value = computed({\r\n        get() {\r\n            return getFromPath(form.values, unref(path));\r\n        },\r\n        set(newVal) {\r\n            form.setFieldValue(unref(path), newVal);\r\n        },\r\n    });\r\n    return {\r\n        value,\r\n        initialValue,\r\n        setInitialValue,\r\n    };\r\n}\r\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\r\nfunction _useFieldMeta(currentValue, initialValue, errors) {\r\n    const meta = reactive({\r\n        touched: false,\r\n        pending: false,\r\n        valid: true,\r\n        validated: !!unref(errors).length,\r\n        initialValue: computed(() => unref(initialValue)),\r\n        dirty: computed(() => {\r\n            return !es6(unref(currentValue), unref(initialValue));\r\n        }),\r\n    });\r\n    watch(errors, value => {\r\n        meta.valid = !value.length;\r\n    }, {\r\n        immediate: true,\r\n        flush: 'sync',\r\n    });\r\n    return meta;\r\n}\r\n/**\r\n * Creates the error message state for the field state\r\n */\r\nfunction _useFieldErrors(path, shouldInjectForm) {\r\n    const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    function normalizeErrors(messages) {\r\n        if (!messages) {\r\n            return [];\r\n        }\r\n        return Array.isArray(messages) ? messages : [messages];\r\n    }\r\n    if (!form) {\r\n        const errors = ref([]);\r\n        return {\r\n            errors,\r\n            errorMessage: computed(() => errors.value[0]),\r\n            setErrors: (messages) => {\r\n                errors.value = normalizeErrors(messages);\r\n            },\r\n        };\r\n    }\r\n    const errors = computed(() => form.errorBag.value[unref(path)] || []);\r\n    return {\r\n        errors,\r\n        errorMessage: computed(() => errors.value[0]),\r\n        setErrors: (messages) => {\r\n            form.setFieldErrorBag(unref(path), normalizeErrors(messages));\r\n        },\r\n    };\r\n}\n\nfunction installDevtoolsPlugin(app) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        setupDevtoolsPlugin({\r\n            id: 'vee-validate-devtools-plugin',\r\n            label: 'VeeValidate Plugin',\r\n            packageName: 'vee-validate',\r\n            homepage: 'https://vee-validate.logaretm.com/v4',\r\n            app,\r\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\r\n        }, setupApiHooks);\r\n    }\r\n}\r\nconst DEVTOOLS_FORMS = {};\r\nconst DEVTOOLS_FIELDS = {};\r\nlet API;\r\nconst refreshInspector = throttle(() => {\r\n    setTimeout(async () => {\r\n        await nextTick();\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\r\n    }, 100);\r\n}, 100);\r\nfunction registerFormWithDevTools(form) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\r\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FORMS[form.formId];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nfunction registerSingleFieldWithDevtools(field) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\r\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FIELDS[field.id];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nconst INSPECTOR_ID = 'vee-validate-inspector';\r\nconst COLORS = {\r\n    error: 0xbd4b4b,\r\n    success: 0x06d77b,\r\n    unknown: 0x54436b,\r\n    white: 0xffffff,\r\n    black: 0x000000,\r\n    blue: 0x035397,\r\n    purple: 0xb980f0,\r\n    orange: 0xf5a962,\r\n    gray: 0xbbbfca,\r\n};\r\nlet SELECTED_NODE = null;\r\nfunction setupApiHooks(api) {\r\n    API = api;\r\n    api.addInspector({\r\n        id: INSPECTOR_ID,\r\n        icon: 'rule',\r\n        label: 'vee-validate',\r\n        noSelectionText: 'Select a vee-validate node to inspect',\r\n        actions: [\r\n            {\r\n                icon: 'done_outline',\r\n                tooltip: 'Validate selected item',\r\n                action: async () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    const result = await SELECTED_NODE.validate();\r\n                    console.log(result);\r\n                },\r\n            },\r\n            {\r\n                icon: 'delete_sweep',\r\n                tooltip: 'Clear validation state of the selected item',\r\n                action: () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    if ('id' in SELECTED_NODE) {\r\n                        SELECTED_NODE.resetField();\r\n                        return;\r\n                    }\r\n                    SELECTED_NODE.resetForm();\r\n                },\r\n            },\r\n        ],\r\n    });\r\n    api.on.getInspectorTree(payload => {\r\n        if (payload.inspectorId !== INSPECTOR_ID) {\r\n            return;\r\n        }\r\n        const forms = Object.values(DEVTOOLS_FORMS);\r\n        const fields = Object.values(DEVTOOLS_FIELDS);\r\n        payload.rootNodes = [\r\n            ...forms.map(mapFormForDevtoolsInspector),\r\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\r\n        ];\r\n    });\r\n    api.on.getInspectorState((payload, ctx) => {\r\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\r\n            return;\r\n        }\r\n        const { form, field, type } = decodeNodeId(payload.nodeId);\r\n        if (form && type === 'form') {\r\n            payload.state = buildFormState(form);\r\n            SELECTED_NODE = form;\r\n            return;\r\n        }\r\n        if (field && type === 'field') {\r\n            payload.state = buildFieldState(field);\r\n            SELECTED_NODE = field;\r\n            return;\r\n        }\r\n        SELECTED_NODE = null;\r\n    });\r\n}\r\nfunction mapFormForDevtoolsInspector(form) {\r\n    const { textColor, bgColor } = getTagTheme(form);\r\n    const formTreeNodes = {};\r\n    Object.values(form.fieldsByPath.value).forEach(field => {\r\n        const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n        if (!fieldInstance) {\r\n            return;\r\n        }\r\n        setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\r\n    });\r\n    function buildFormTree(tree, path = []) {\r\n        const key = [...path].pop();\r\n        if ('id' in tree) {\r\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\r\n        }\r\n        if (isObject(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: key || '',\r\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\r\n            };\r\n        }\r\n        if (Array.isArray(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: `${key}[]`,\r\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\r\n            };\r\n        }\r\n        return { id: '', label: '', children: [] };\r\n    }\r\n    const { children } = buildFormTree(formTreeNodes);\r\n    return {\r\n        id: encodeNodeId(form),\r\n        label: 'Form',\r\n        children,\r\n        tags: [\r\n            {\r\n                label: 'Form',\r\n                textColor,\r\n                backgroundColor: bgColor,\r\n            },\r\n            {\r\n                label: `${Object.keys(form.fieldsByPath.value).length} fields`,\r\n                textColor: COLORS.white,\r\n                backgroundColor: COLORS.unknown,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction mapFieldForDevtoolsInspector(field, form) {\r\n    const fieldInstance = normalizeField(field);\r\n    const { textColor, bgColor } = getTagTheme(fieldInstance);\r\n    const isGroup = Array.isArray(field) && field.length > 1;\r\n    return {\r\n        id: encodeNodeId(form, fieldInstance, !isGroup),\r\n        label: unref(fieldInstance.name),\r\n        children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\r\n        tags: [\r\n            isGroup\r\n                ? undefined\r\n                : {\r\n                    label: 'Field',\r\n                    textColor,\r\n                    backgroundColor: bgColor,\r\n                },\r\n            !form\r\n                ? {\r\n                    label: 'Standalone',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.gray,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'checkbox'\r\n                ? {\r\n                    label: 'Checkbox',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.blue,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'radio'\r\n                ? {\r\n                    label: 'Radio',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.purple,\r\n                }\r\n                : undefined,\r\n            isGroup\r\n                ? {\r\n                    label: 'Group',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.orange,\r\n                }\r\n                : undefined,\r\n        ].filter(Boolean),\r\n    };\r\n}\r\nfunction encodeNodeId(form, field, encodeIndex = true) {\r\n    const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\r\n    const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\r\n    let idx;\r\n    if (encodeIndex && field && Array.isArray(fieldGroup)) {\r\n        idx = fieldGroup.indexOf(field);\r\n    }\r\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, idx, type: field ? 'field' : 'form' };\r\n    return btoa(JSON.stringify(idObject));\r\n}\r\nfunction decodeNodeId(nodeId) {\r\n    try {\r\n        const idObject = JSON.parse(atob(nodeId));\r\n        const form = DEVTOOLS_FORMS[idObject.f];\r\n        if (!form && idObject.ff) {\r\n            const field = DEVTOOLS_FIELDS[idObject.ff];\r\n            if (!field) {\r\n                return {};\r\n            }\r\n            return {\r\n                type: idObject.type,\r\n                field,\r\n            };\r\n        }\r\n        if (!form) {\r\n            return {};\r\n        }\r\n        const fieldGroup = form.fieldsByPath.value[idObject.ff];\r\n        return {\r\n            type: idObject.type,\r\n            form,\r\n            field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup,\r\n        };\r\n    }\r\n    catch (err) {\r\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\r\n    }\r\n    return {};\r\n}\r\nfunction buildFieldState(field) {\r\n    const { errors, meta, value } = field;\r\n    return {\r\n        'Field state': [\r\n            { key: 'errors', value: errors.value },\r\n            {\r\n                key: 'initialValue',\r\n                value: meta.initialValue,\r\n            },\r\n            {\r\n                key: 'currentValue',\r\n                value: value.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.valid,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction buildFormState(form) {\r\n    const { errorBag, meta, values, isSubmitting, submitCount } = form;\r\n    return {\r\n        'Form state': [\r\n            {\r\n                key: 'submitCount',\r\n                value: submitCount.value,\r\n            },\r\n            {\r\n                key: 'isSubmitting',\r\n                value: isSubmitting.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.value.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.value.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.value.valid,\r\n            },\r\n            {\r\n                key: 'initialValues',\r\n                value: meta.value.initialValues,\r\n            },\r\n            {\r\n                key: 'currentValues',\r\n                value: values,\r\n            },\r\n            {\r\n                key: 'errors',\r\n                value: keysOf(errorBag.value).reduce((acc, key) => {\r\n                    var _a;\r\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\r\n                    if (message) {\r\n                        acc[key] = message;\r\n                    }\r\n                    return acc;\r\n                }, {}),\r\n            },\r\n        ],\r\n    };\r\n}\r\n/**\r\n * Resolves the tag color based on the form state\r\n */\r\nfunction getTagTheme(fieldOrForm) {\r\n    // const fallbackColors = {\r\n    //   bgColor: COLORS.unknown,\r\n    //   textColor: COLORS.white,\r\n    // };\r\n    const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\r\n    return {\r\n        bgColor: isValid ? COLORS.success : COLORS.error,\r\n        textColor: isValid ? COLORS.black : COLORS.white,\r\n    };\r\n}\n\n/**\r\n * Creates a field composite.\r\n */\r\nfunction useField(name, rules, opts) {\r\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\r\n        return useCheckboxField(name, rules, opts);\r\n    }\r\n    return _useField(name, rules, opts);\r\n}\r\nfunction _useField(name, rules, opts) {\r\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, standalone, } = normalizeOptions(unref(name), opts);\r\n    const form = !standalone ? injectWithSelf(FormContextKey) : undefined;\r\n    const { id, value, initialValue, meta, setState, errors, errorMessage } = useFieldState(name, {\r\n        modelValue,\r\n        standalone,\r\n    });\r\n    /**\r\n     * Handles common onBlur meta update\r\n     */\r\n    const handleBlur = () => {\r\n        meta.touched = true;\r\n    };\r\n    const normalizedRules = computed(() => {\r\n        let rulesValue = unref(rules);\r\n        const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\r\n        if (schema && !isYupValidator(schema)) {\r\n            rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\r\n        }\r\n        if (isYupValidator(rulesValue) || isCallable(rulesValue)) {\r\n            return rulesValue;\r\n        }\r\n        return normalizeRules(rulesValue);\r\n    });\r\n    async function validateCurrentValue(mode) {\r\n        var _a, _b;\r\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\r\n            return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\r\n        }\r\n        return validate(value.value, normalizedRules.value, {\r\n            name: unref(label) || unref(name),\r\n            values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\r\n            bails,\r\n        });\r\n    }\r\n    async function validateWithStateMutation() {\r\n        meta.pending = true;\r\n        meta.validated = true;\r\n        const result = await validateCurrentValue('validated-only');\r\n        setState({ errors: result.errors });\r\n        meta.pending = false;\r\n        return result;\r\n    }\r\n    async function validateValidStateOnly() {\r\n        const result = await validateCurrentValue('silent');\r\n        meta.valid = result.valid;\r\n        return result;\r\n    }\r\n    function validate$1(opts) {\r\n        if (!(opts === null || opts === void 0 ? void 0 : opts.mode) || (opts === null || opts === void 0 ? void 0 : opts.mode) === 'force') {\r\n            return validateWithStateMutation();\r\n        }\r\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'validated-only') {\r\n            return validateWithStateMutation();\r\n        }\r\n        return validateValidStateOnly();\r\n    }\r\n    // Common input/change event handler\r\n    const handleChange = (e, shouldValidate = true) => {\r\n        const newValue = normalizeEventValue(e);\r\n        value.value = newValue;\r\n        if (!validateOnValueUpdate && shouldValidate) {\r\n            validateWithStateMutation();\r\n        }\r\n    };\r\n    // Runs the initial validation\r\n    onMounted(() => {\r\n        if (validateOnMount) {\r\n            return validateWithStateMutation();\r\n        }\r\n        // validate self initially if no form was handling this\r\n        // forms should have their own initial silent validation run to make things more efficient\r\n        if (!form || !form.validateSchema) {\r\n            validateValidStateOnly();\r\n        }\r\n    });\r\n    function setTouched(isTouched) {\r\n        meta.touched = isTouched;\r\n    }\r\n    let unwatchValue;\r\n    function watchValue() {\r\n        unwatchValue = watch(value, validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly, {\r\n            deep: true,\r\n        });\r\n    }\r\n    watchValue();\r\n    function resetField(state) {\r\n        var _a;\r\n        unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\r\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\r\n        setState({\r\n            value: klona(newValue),\r\n            initialValue: klona(newValue),\r\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\r\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\r\n        });\r\n        meta.pending = false;\r\n        meta.validated = false;\r\n        validateValidStateOnly();\r\n        // need to watch at next tick to avoid triggering the value watcher\r\n        nextTick(() => {\r\n            watchValue();\r\n        });\r\n    }\r\n    function setValue(newValue) {\r\n        value.value = newValue;\r\n    }\r\n    function setErrors(errors) {\r\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\r\n    }\r\n    const field = {\r\n        id,\r\n        name,\r\n        label,\r\n        value,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        type,\r\n        checkedValue,\r\n        uncheckedValue,\r\n        bails,\r\n        resetField,\r\n        handleReset: () => resetField(),\r\n        validate: validate$1,\r\n        handleChange,\r\n        handleBlur,\r\n        setState,\r\n        setTouched,\r\n        setErrors,\r\n        setValue,\r\n    };\r\n    provide(FieldContextKey, field);\r\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\r\n        watch(rules, (value, oldValue) => {\r\n            if (es6(value, oldValue)) {\r\n                return;\r\n            }\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        field._vm = getCurrentInstance();\r\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n        if (!form) {\r\n            registerSingleFieldWithDevtools(field);\r\n        }\r\n    }\r\n    // if no associated form return the field API immediately\r\n    if (!form) {\r\n        return field;\r\n    }\r\n    // associate the field with the given form\r\n    form.register(field);\r\n    onBeforeUnmount(() => {\r\n        form.unregister(field);\r\n    });\r\n    // extract cross-field dependencies in a computed prop\r\n    const dependencies = computed(() => {\r\n        const rulesVal = normalizedRules.value;\r\n        // is falsy, a function schema or a yup schema\r\n        if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal)) {\r\n            return {};\r\n        }\r\n        return Object.keys(rulesVal).reduce((acc, rule) => {\r\n            const deps = extractLocators(rulesVal[rule])\r\n                .map((dep) => dep.__locatorRef)\r\n                .reduce((depAcc, depName) => {\r\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\r\n                if (depValue !== undefined) {\r\n                    depAcc[depName] = depValue;\r\n                }\r\n                return depAcc;\r\n            }, {});\r\n            Object.assign(acc, deps);\r\n            return acc;\r\n        }, {});\r\n    });\r\n    // Adds a watcher that runs the validation whenever field dependencies change\r\n    watch(dependencies, (deps, oldDeps) => {\r\n        // Skip if no dependencies or if the field wasn't manipulated\r\n        if (!Object.keys(deps).length) {\r\n            return;\r\n        }\r\n        const shouldValidate = !es6(deps, oldDeps);\r\n        if (shouldValidate) {\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }\r\n    });\r\n    return field;\r\n}\r\n/**\r\n * Normalizes partial field options to include the full options\r\n */\r\nfunction normalizeOptions(name, opts) {\r\n    const defaults = () => ({\r\n        initialValue: undefined,\r\n        validateOnMount: false,\r\n        bails: true,\r\n        rules: '',\r\n        label: name,\r\n        validateOnValueUpdate: true,\r\n        standalone: false,\r\n    });\r\n    if (!opts) {\r\n        return defaults();\r\n    }\r\n    // TODO: Deprecate this in next major release\r\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\r\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { checkedValue });\r\n}\r\n/**\r\n * Extracts the validation rules from a schema\r\n */\r\nfunction extractRuleFromSchema(schema, fieldName) {\r\n    // no schema at all\r\n    if (!schema) {\r\n        return undefined;\r\n    }\r\n    // there is a key on the schema object for this field\r\n    return schema[fieldName];\r\n}\r\nfunction useCheckboxField(name, rules, opts) {\r\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\r\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\r\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\r\n    function patchCheckboxApi(field) {\r\n        const handleChange = field.handleChange;\r\n        const checked = computed(() => {\r\n            const currentValue = unref(field.value);\r\n            const checkedVal = unref(checkedValue);\r\n            return Array.isArray(currentValue) ? currentValue.includes(checkedVal) : checkedVal === currentValue;\r\n        });\r\n        function handleCheckboxChange(e, shouldValidate = true) {\r\n            var _a, _b;\r\n            if (checked.value === ((_b = (_a = e) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.checked)) {\r\n                return;\r\n            }\r\n            let newValue = normalizeEventValue(e);\r\n            // Single checkbox field without a form to toggle it's value\r\n            if (!form) {\r\n                newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\r\n            }\r\n            handleChange(newValue, shouldValidate);\r\n        }\r\n        onBeforeUnmount(() => {\r\n            // toggles the checkbox value if it was checked\r\n            if (checked.value) {\r\n                handleCheckboxChange(unref(checkedValue), false);\r\n            }\r\n        });\r\n        return Object.assign(Object.assign({}, field), { checked,\r\n            checkedValue,\r\n            uncheckedValue, handleChange: handleCheckboxChange });\r\n    }\r\n    return patchCheckboxApi(_useField(name, rules, opts));\r\n}\n\nconst FieldImpl = defineComponent({\r\n    name: 'Field',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: [String, Object],\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        rules: {\r\n            type: [Object, String, Function],\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        validateOnBlur: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnChange: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnInput: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnModelUpdate: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        bails: {\r\n            type: Boolean,\r\n            default: () => getConfig().bails,\r\n        },\r\n        label: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        uncheckedValue: {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        modelValue: {\r\n            type: null,\r\n            default: IS_ABSENT,\r\n        },\r\n        modelModifiers: {\r\n            type: null,\r\n            default: () => ({}),\r\n        },\r\n        'onUpdate:modelValue': {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        standalone: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const rules = toRef(props, 'rules');\r\n        const name = toRef(props, 'name');\r\n        const label = toRef(props, 'label');\r\n        const uncheckedValue = toRef(props, 'uncheckedValue');\r\n        const hasModelEvents = isPropPresent(props, 'onUpdate:modelValue');\r\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\r\n            validateOnMount: props.validateOnMount,\r\n            bails: props.bails,\r\n            standalone: props.standalone,\r\n            type: ctx.attrs.type,\r\n            initialValue: resolveInitialValue(props, ctx),\r\n            // Only for checkboxes and radio buttons\r\n            checkedValue: ctx.attrs.value,\r\n            uncheckedValue,\r\n            label,\r\n            validateOnValueUpdate: false,\r\n        });\r\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\r\n        const onChangeHandler = hasModelEvents\r\n            ? function handleChangeWithModel(e, shouldValidate = true) {\r\n                handleChange(e, shouldValidate);\r\n                ctx.emit('update:modelValue', value.value);\r\n            }\r\n            : handleChange;\r\n        const handleInput = (e) => {\r\n            if (!hasCheckedAttr(ctx.attrs.type)) {\r\n                value.value = normalizeEventValue(e);\r\n            }\r\n        };\r\n        const onInputHandler = hasModelEvents\r\n            ? function handleInputWithModel(e) {\r\n                handleInput(e);\r\n                ctx.emit('update:modelValue', value.value);\r\n            }\r\n            : handleInput;\r\n        const fieldProps = computed(() => {\r\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\r\n            const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\r\n            const baseOnInput = [(e) => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\r\n            const baseOnChange = [(e) => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\r\n            const attrs = {\r\n                name: props.name,\r\n                onBlur: baseOnBlur,\r\n                onInput: baseOnInput,\r\n                onChange: baseOnChange,\r\n            };\r\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\r\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\r\n                attrs.checked = checked.value;\r\n            }\r\n            else {\r\n                attrs.value = value.value;\r\n            }\r\n            const tag = resolveTag(props, ctx);\r\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\r\n                delete attrs.value;\r\n            }\r\n            return attrs;\r\n        });\r\n        const modelValue = toRef(props, 'modelValue');\r\n        watch(modelValue, newModelValue => {\r\n            // Don't attempt to sync absent values\r\n            if (newModelValue === IS_ABSENT && value.value === undefined) {\r\n                return;\r\n            }\r\n            if (newModelValue !== applyModifiers(value.value, props.modelModifiers)) {\r\n                value.value = newModelValue === IS_ABSENT ? undefined : newModelValue;\r\n                validateField();\r\n            }\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                field: fieldProps.value,\r\n                value: value.value,\r\n                meta,\r\n                errors: errors.value,\r\n                errorMessage: errorMessage.value,\r\n                validate: validateField,\r\n                resetField,\r\n                handleChange: onChangeHandler,\r\n                handleInput: onInputHandler,\r\n                handleReset,\r\n                handleBlur,\r\n                setTouched,\r\n                setErrors,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            setErrors,\r\n            setTouched,\r\n            reset: resetField,\r\n            validate: validateField,\r\n            handleChange,\r\n        });\r\n        return () => {\r\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (tag) {\r\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\r\n            }\r\n            return children;\r\n        };\r\n    },\r\n});\r\nfunction resolveTag(props, ctx) {\r\n    let tag = props.as || '';\r\n    if (!props.as && !ctx.slots.default) {\r\n        tag = 'input';\r\n    }\r\n    return tag;\r\n}\r\nfunction resolveValidationTriggers(props) {\r\n    var _a, _b, _c, _d;\r\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\r\n    return {\r\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\r\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\r\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\r\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\r\n    };\r\n}\r\nfunction applyModifiers(value, modifiers) {\r\n    if (modifiers.number) {\r\n        return toNumber(value);\r\n    }\r\n    return value;\r\n}\r\nfunction resolveInitialValue(props, ctx) {\r\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\r\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\r\n    if (!hasCheckedAttr(ctx.attrs.type)) {\r\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\r\n    }\r\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\r\n}\r\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\r\nfunction useForm(opts) {\r\n    const formId = FORM_COUNTER++;\r\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\r\n    // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\r\n    let RESET_LOCK = false;\r\n    // A lookup containing fields or field groups\r\n    const fieldsByPath = ref({});\r\n    // If the form is currently submitting\r\n    const isSubmitting = ref(false);\r\n    // The number of times the user tried to submit the form\r\n    const submitCount = ref(0);\r\n    // dictionary for field arrays to receive various signals like reset\r\n    const fieldArraysLookup = {};\r\n    // a private ref for all form values\r\n    const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {}));\r\n    // the source of errors for the form fields\r\n    const { errorBag, setErrorBag, setFieldErrorBag } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\r\n    // Gets the first error of each field\r\n    const errors = computed(() => {\r\n        return keysOf(errorBag.value).reduce((acc, key) => {\r\n            const bag = errorBag.value[key];\r\n            if (bag && bag.length) {\r\n                acc[key] = bag[0];\r\n            }\r\n            return acc;\r\n        }, {});\r\n    });\r\n    function getFirstFieldAtPath(path) {\r\n        const fieldOrGroup = fieldsByPath.value[path];\r\n        return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\r\n    }\r\n    function fieldExists(path) {\r\n        return !!fieldsByPath.value[path];\r\n    }\r\n    /**\r\n     * Holds a computed reference to all fields names and labels\r\n     */\r\n    const fieldNames = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((names, path) => {\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                names[path] = unref(field.label || field.name) || '';\r\n            }\r\n            return names;\r\n        }, {});\r\n    });\r\n    const fieldBailsMap = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((map, path) => {\r\n            var _a;\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\r\n            }\r\n            return map;\r\n        }, {});\r\n    });\r\n    // mutable non-reactive reference to initial errors\r\n    // we need this to process initial errors then unset them\r\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\r\n    // initial form values\r\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues);\r\n    // form meta aggregations\r\n    const meta = useFormMeta(fieldsByPath, formValues, initialValues, errors);\r\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\r\n    const formCtx = {\r\n        formId,\r\n        fieldsByPath,\r\n        values: formValues,\r\n        errorBag,\r\n        errors,\r\n        schema,\r\n        submitCount,\r\n        meta,\r\n        isSubmitting,\r\n        fieldArraysLookup,\r\n        validateSchema: unref(schema) ? validateSchema : undefined,\r\n        validate,\r\n        register: registerField,\r\n        unregister: unregisterField,\r\n        setFieldErrorBag,\r\n        validateField,\r\n        setFieldValue,\r\n        setValues,\r\n        setErrors,\r\n        setFieldError,\r\n        setFieldTouched,\r\n        setTouched,\r\n        resetForm,\r\n        handleSubmit,\r\n        stageInitialValue,\r\n        unsetInitialValue,\r\n        setFieldInitialValue,\r\n    };\r\n    function isFieldGroup(fieldOrGroup) {\r\n        return Array.isArray(fieldOrGroup);\r\n    }\r\n    function applyFieldMutation(fieldOrGroup, mutation) {\r\n        if (Array.isArray(fieldOrGroup)) {\r\n            return fieldOrGroup.forEach(mutation);\r\n        }\r\n        return mutation(fieldOrGroup);\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldError(field, message) {\r\n        setFieldErrorBag(field, message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrors(fields) {\r\n        setErrorBag(fields);\r\n    }\r\n    /**\r\n     * Sets a single field value\r\n     */\r\n    function setFieldValue(field, value, { force } = { force: false }) {\r\n        var _a;\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        const clonedValue = klona(value);\r\n        // field wasn't found, create a virtual field as a placeholder\r\n        if (!fieldInstance) {\r\n            setInPath(formValues, field, clonedValue);\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\r\n            // Multiple checkboxes, and only one of them got updated\r\n            const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\r\n            setInPath(formValues, field, newValue);\r\n            return;\r\n        }\r\n        let newValue = value;\r\n        // Single Checkbox: toggles the field value unless the field is being reset then force it\r\n        if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\r\n            newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\r\n        }\r\n        setInPath(formValues, field, newValue);\r\n    }\r\n    /**\r\n     * Sets multiple fields values\r\n     */\r\n    function setValues(fields) {\r\n        // clean up old values\r\n        keysOf(formValues).forEach(key => {\r\n            delete formValues[key];\r\n        });\r\n        // set up new values\r\n        keysOf(fields).forEach(path => {\r\n            setFieldValue(path, fields[path]);\r\n        });\r\n        // regenerate the arrays when the form values change\r\n        Object.values(fieldArraysLookup).forEach(f => f && f.reset());\r\n    }\r\n    /**\r\n     * Sets the touched meta state on a field\r\n     */\r\n    function setFieldTouched(field, isTouched) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (fieldInstance) {\r\n            applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\r\n        }\r\n    }\r\n    /**\r\n     * Sets the touched meta state on multiple fields\r\n     */\r\n    function setTouched(fields) {\r\n        keysOf(fields).forEach(field => {\r\n            setFieldTouched(field, !!fields[field]);\r\n        });\r\n    }\r\n    /**\r\n     * Resets all fields\r\n     */\r\n    function resetForm(state) {\r\n        RESET_LOCK = true;\r\n        // set initial values if provided\r\n        if (state === null || state === void 0 ? void 0 : state.values) {\r\n            setInitialValues(state.values);\r\n            setValues(state === null || state === void 0 ? void 0 : state.values);\r\n        }\r\n        else {\r\n            // clean up the initial values back to the original\r\n            setInitialValues(originalInitialValues.value);\r\n            // otherwise clean the current values\r\n            setValues(originalInitialValues.value);\r\n        }\r\n        Object.values(fieldsByPath.value).forEach(field => {\r\n            if (!field) {\r\n                return;\r\n            }\r\n            // avoid resetting the field values, because they should've been reset already.\r\n            applyFieldMutation(field, f => f.resetField());\r\n        });\r\n        if (state === null || state === void 0 ? void 0 : state.touched) {\r\n            setTouched(state.touched);\r\n        }\r\n        setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\r\n        submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\r\n        nextTick(() => {\r\n            RESET_LOCK = false;\r\n        });\r\n    }\r\n    function insertFieldAtPath(field, path) {\r\n        const rawField = markRaw(field);\r\n        const fieldPath = path;\r\n        // first field at that path\r\n        if (!fieldsByPath.value[fieldPath]) {\r\n            fieldsByPath.value[fieldPath] = rawField;\r\n            return;\r\n        }\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (fieldAtPath && !Array.isArray(fieldAtPath)) {\r\n            fieldsByPath.value[fieldPath] = [fieldAtPath];\r\n        }\r\n        // add the new array to that path\r\n        fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\r\n    }\r\n    function removeFieldFromPath(field, path) {\r\n        const fieldPath = path;\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (!fieldAtPath) {\r\n            return;\r\n        }\r\n        // same field at path\r\n        if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\r\n            delete fieldsByPath.value[fieldPath];\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldAtPath)) {\r\n            const idx = fieldAtPath.findIndex(f => f.id === field.id);\r\n            if (idx === -1) {\r\n                return;\r\n            }\r\n            fieldAtPath.splice(idx, 1);\r\n            if (fieldAtPath.length === 1) {\r\n                fieldsByPath.value[fieldPath] = fieldAtPath[0];\r\n                return;\r\n            }\r\n            if (!fieldAtPath.length) {\r\n                delete fieldsByPath.value[fieldPath];\r\n            }\r\n        }\r\n    }\r\n    function registerField(field) {\r\n        const fieldPath = unref(field.name);\r\n        insertFieldAtPath(field, fieldPath);\r\n        if (isRef(field.name)) {\r\n            // ensures when a field's name was already taken that it preserves its same value\r\n            // necessary for fields generated by loops\r\n            watch(field.name, async (newPath, oldPath) => {\r\n                // cache the value\r\n                await nextTick();\r\n                removeFieldFromPath(field, oldPath);\r\n                insertFieldAtPath(field, newPath);\r\n                // re-validate if either path had errors before\r\n                if (errors.value[oldPath] || errors.value[newPath]) {\r\n                    // clear up both paths errors\r\n                    setFieldError(oldPath, undefined);\r\n                    validateField(newPath);\r\n                }\r\n                // clean up the old path if no other field is sharing that name\r\n                // #3325\r\n                await nextTick();\r\n                if (!fieldExists(oldPath)) {\r\n                    unsetPath(formValues, oldPath);\r\n                }\r\n            });\r\n        }\r\n        // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\r\n        // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\r\n        // #3342\r\n        const initialErrorMessage = unref(field.errorMessage);\r\n        if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\r\n            validateField(fieldPath);\r\n        }\r\n        // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\r\n        delete initialErrors[fieldPath];\r\n    }\r\n    function unregisterField(field) {\r\n        const fieldName = unref(field.name);\r\n        removeFieldFromPath(field, fieldName);\r\n        nextTick(() => {\r\n            // clears a field error on unmounted\r\n            // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\r\n            // #3384\r\n            if (!fieldExists(fieldName)) {\r\n                setFieldError(fieldName, undefined);\r\n                unsetPath(formValues, fieldName);\r\n            }\r\n        });\r\n    }\r\n    async function validate(opts) {\r\n        if (formCtx.validateSchema) {\r\n            return formCtx.validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'force');\r\n        }\r\n        // No schema, each field is responsible to validate itself\r\n        const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\r\n            const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n            if (!fieldInstance) {\r\n                return Promise.resolve({ key: '', valid: true, errors: [] });\r\n            }\r\n            return fieldInstance.validate(opts).then((result) => {\r\n                return {\r\n                    key: unref(fieldInstance.name),\r\n                    valid: result.valid,\r\n                    errors: result.errors,\r\n                };\r\n            });\r\n        }));\r\n        const results = {};\r\n        const errors = {};\r\n        for (const validation of validations) {\r\n            results[validation.key] = {\r\n                valid: validation.valid,\r\n                errors: validation.errors,\r\n            };\r\n            if (validation.errors.length) {\r\n                errors[validation.key] = validation.errors[0];\r\n            }\r\n        }\r\n        return {\r\n            valid: validations.every(r => r.valid),\r\n            results,\r\n            errors,\r\n        };\r\n    }\r\n    async function validateField(field) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (!fieldInstance) {\r\n            warn$1(`field with name ${field} was not found`);\r\n            return Promise.resolve({ errors: [], valid: true });\r\n        }\r\n        if (Array.isArray(fieldInstance)) {\r\n            return fieldInstance.map(f => f.validate())[0];\r\n        }\r\n        return fieldInstance.validate();\r\n    }\r\n    function handleSubmit(fn, onValidationError) {\r\n        return function submissionHandler(e) {\r\n            if (e instanceof Event) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }\r\n            // Touch all fields\r\n            setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\r\n                acc[field] = true;\r\n                return acc;\r\n            }, {}));\r\n            isSubmitting.value = true;\r\n            submitCount.value++;\r\n            return validate()\r\n                .then(result => {\r\n                if (result.valid && typeof fn === 'function') {\r\n                    return fn(klona(formValues), {\r\n                        evt: e,\r\n                        setErrors,\r\n                        setFieldError,\r\n                        setTouched,\r\n                        setFieldTouched,\r\n                        setValues,\r\n                        setFieldValue,\r\n                        resetForm,\r\n                    });\r\n                }\r\n                if (!result.valid && typeof onValidationError === 'function') {\r\n                    onValidationError({\r\n                        values: klona(formValues),\r\n                        evt: e,\r\n                        errors: result.errors,\r\n                        results: result.results,\r\n                    });\r\n                }\r\n            })\r\n                .then(returnVal => {\r\n                isSubmitting.value = false;\r\n                return returnVal;\r\n            }, err => {\r\n                isSubmitting.value = false;\r\n                // re-throw the err so it doesn't go silent\r\n                throw err;\r\n            });\r\n        };\r\n    }\r\n    function setFieldInitialValue(path, value) {\r\n        setInPath(initialValues.value, path, klona(value));\r\n    }\r\n    function unsetInitialValue(path) {\r\n        unsetPath(initialValues.value, path);\r\n    }\r\n    /**\r\n     * Sneaky function to set initial field values\r\n     */\r\n    function stageInitialValue(path, value) {\r\n        setInPath(formValues, path, value);\r\n        setFieldInitialValue(path, value);\r\n    }\r\n    async function _validateSchema() {\r\n        const schemaValue = unref(schema);\r\n        if (!schemaValue) {\r\n            return { valid: true, results: {}, errors: {} };\r\n        }\r\n        const formResult = isYupValidator(schemaValue)\r\n            ? await validateYupSchema(schemaValue, formValues)\r\n            : await validateObjectSchema(schemaValue, formValues, {\r\n                names: fieldNames.value,\r\n                bailsMap: fieldBailsMap.value,\r\n            });\r\n        return formResult;\r\n    }\r\n    /**\r\n     * Batches validation runs in 5ms batches\r\n     */\r\n    const debouncedSchemaValidation = debounceAsync(_validateSchema, 5);\r\n    async function validateSchema(mode) {\r\n        const formResult = await debouncedSchemaValidation();\r\n        // fields by id lookup\r\n        const fieldsById = formCtx.fieldsByPath.value || {};\r\n        // errors fields names, we need it to also check if custom errors are updated\r\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\r\n        // collect all the keys from the schema and all fields\r\n        // this ensures we have a complete keymap of all the fields\r\n        const paths = [\r\n            ...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths]),\r\n        ];\r\n        // aggregates the paths into a single result object while applying the results on the fields\r\n        return paths.reduce((validation, path) => {\r\n            const field = fieldsById[path];\r\n            const messages = (formResult.results[path] || { errors: [] }).errors;\r\n            const fieldResult = {\r\n                errors: messages,\r\n                valid: !messages.length,\r\n            };\r\n            validation.results[path] = fieldResult;\r\n            if (!fieldResult.valid) {\r\n                validation.errors[path] = fieldResult.errors[0];\r\n            }\r\n            // field not rendered\r\n            if (!field) {\r\n                setFieldError(path, messages);\r\n                return validation;\r\n            }\r\n            // always update the valid flag regardless of the mode\r\n            applyFieldMutation(field, f => (f.meta.valid = fieldResult.valid));\r\n            if (mode === 'silent') {\r\n                return validation;\r\n            }\r\n            const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\r\n            if (mode === 'validated-only' && !wasValidated) {\r\n                return validation;\r\n            }\r\n            applyFieldMutation(field, f => f.setState({ errors: fieldResult.errors }));\r\n            return validation;\r\n        }, { valid: formResult.valid, results: {}, errors: {} });\r\n    }\r\n    const submitForm = handleSubmit((_, { evt }) => {\r\n        if (isFormSubmitEvent(evt)) {\r\n            evt.target.submit();\r\n        }\r\n    });\r\n    // Trigger initial validation\r\n    onMounted(() => {\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\r\n            setErrors(opts.initialErrors);\r\n        }\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\r\n            setTouched(opts.initialTouched);\r\n        }\r\n        // if validate on mount was enabled\r\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\r\n            validate();\r\n            return;\r\n        }\r\n        // otherwise run initial silent validation through schema if available\r\n        // the useField should skip their own silent validation if a yup schema is present\r\n        if (formCtx.validateSchema) {\r\n            formCtx.validateSchema('silent');\r\n        }\r\n    });\r\n    if (isRef(schema)) {\r\n        watch(schema, () => {\r\n            var _a;\r\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\r\n        });\r\n    }\r\n    // Provide injections\r\n    provide(FormContextKey, formCtx);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        registerFormWithDevTools(formCtx);\r\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, submitCount: submitCount.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        errors,\r\n        meta,\r\n        values: formValues,\r\n        isSubmitting,\r\n        submitCount,\r\n        validate,\r\n        validateField,\r\n        handleReset: () => resetForm(),\r\n        resetForm,\r\n        handleSubmit,\r\n        submitForm,\r\n        setFieldError,\r\n        setErrors,\r\n        setFieldValue,\r\n        setValues,\r\n        setFieldTouched,\r\n        setTouched,\r\n    };\r\n}\r\n/**\r\n * Manages form meta aggregation\r\n */\r\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\r\n    const MERGE_STRATEGIES = {\r\n        touched: 'some',\r\n        pending: 'some',\r\n        valid: 'every',\r\n    };\r\n    const isDirty = computed(() => {\r\n        return !es6(currentValues, unref(initialValues));\r\n    });\r\n    function calculateFlags() {\r\n        const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\r\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\r\n            const mergeMethod = MERGE_STRATEGIES[flag];\r\n            acc[flag] = fields[mergeMethod](field => field.meta[flag]);\r\n            return acc;\r\n        }, {});\r\n    }\r\n    const flags = reactive(calculateFlags());\r\n    watchEffect(() => {\r\n        const value = calculateFlags();\r\n        flags.touched = value.touched;\r\n        flags.valid = value.valid;\r\n        flags.pending = value.pending;\r\n    });\r\n    return computed(() => {\r\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\r\n    });\r\n}\r\n/**\r\n * Manages the initial values prop\r\n */\r\nfunction useFormInitialValues(fields, formValues, providedValues) {\r\n    // these are the mutable initial values as the fields are mounted/unmounted\r\n    const initialValues = ref(klona(unref(providedValues)) || {});\r\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\r\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\r\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\r\n    // so these are the values that the reset function should use\r\n    // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\r\n    const originalInitialValues = ref(klona(unref(providedValues)) || {});\r\n    function setInitialValues(values, updateFields = false) {\r\n        initialValues.value = klona(values);\r\n        originalInitialValues.value = klona(values);\r\n        if (!updateFields) {\r\n            return;\r\n        }\r\n        // update the pristine non-touched fields\r\n        // those are excluded because it's unlikely you want to change the form values using initial values\r\n        // we mostly watch them for API population or newly inserted fields\r\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\r\n        keysOf(fields.value).forEach(fieldPath => {\r\n            const field = fields.value[fieldPath];\r\n            const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\r\n            if (!field || wasTouched) {\r\n                return;\r\n            }\r\n            const newValue = getFromPath(initialValues.value, fieldPath);\r\n            setInPath(formValues, fieldPath, klona(newValue));\r\n        });\r\n    }\r\n    if (isRef(providedValues)) {\r\n        watch(providedValues, value => {\r\n            setInitialValues(value, true);\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        initialValues,\r\n        originalInitialValues,\r\n        setInitialValues,\r\n    };\r\n}\r\nfunction useErrorBag(initialErrors) {\r\n    const errorBag = ref({});\r\n    function normalizeErrorItem(message) {\r\n        return Array.isArray(message) ? message : message ? [message] : [];\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldErrorBag(field, message) {\r\n        if (!message) {\r\n            delete errorBag.value[field];\r\n            return;\r\n        }\r\n        errorBag.value[field] = normalizeErrorItem(message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrorBag(fields) {\r\n        errorBag.value = keysOf(fields).reduce((acc, key) => {\r\n            const message = fields[key];\r\n            if (message) {\r\n                acc[key] = normalizeErrorItem(message);\r\n            }\r\n            return acc;\r\n        }, {});\r\n    }\r\n    if (initialErrors) {\r\n        setErrorBag(initialErrors);\r\n    }\r\n    return {\r\n        errorBag,\r\n        setErrorBag,\r\n        setFieldErrorBag,\r\n    };\r\n}\n\nconst FormImpl = defineComponent({\r\n    name: 'Form',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: 'form',\r\n        },\r\n        validationSchema: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialValues: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialErrors: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialTouched: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        onSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        onInvalidSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const initialValues = toRef(props, 'initialValues');\r\n        const validationSchema = toRef(props, 'validationSchema');\r\n        const { errors, values, meta, isSubmitting, submitCount, validate, validateField, handleReset, resetForm, handleSubmit, submitForm, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, } = useForm({\r\n            validationSchema: validationSchema.value ? validationSchema : undefined,\r\n            initialValues,\r\n            initialErrors: props.initialErrors,\r\n            initialTouched: props.initialTouched,\r\n            validateOnMount: props.validateOnMount,\r\n        });\r\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\r\n        function handleFormReset(e) {\r\n            if (isEvent(e)) {\r\n                // Prevent default form reset behavior\r\n                e.preventDefault();\r\n            }\r\n            handleReset();\r\n            if (typeof ctx.attrs.onReset === 'function') {\r\n                ctx.attrs.onReset();\r\n            }\r\n        }\r\n        function handleScopedSlotSubmit(evt, onSubmit) {\r\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\r\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\r\n        }\r\n        function slotProps() {\r\n            return {\r\n                meta: meta.value,\r\n                errors: errors.value,\r\n                values: values,\r\n                isSubmitting: isSubmitting.value,\r\n                submitCount: submitCount.value,\r\n                validate,\r\n                validateField,\r\n                handleSubmit: handleScopedSlotSubmit,\r\n                handleReset,\r\n                submitForm,\r\n                setErrors,\r\n                setFieldError,\r\n                setFieldValue,\r\n                setValues,\r\n                setFieldTouched,\r\n                setTouched,\r\n                resetForm,\r\n            };\r\n        }\r\n        // expose these functions and methods as part of public API\r\n        ctx.expose({\r\n            setFieldError,\r\n            setErrors,\r\n            setFieldValue,\r\n            setValues,\r\n            setFieldTouched,\r\n            setTouched,\r\n            resetForm,\r\n            validate,\r\n            validateField,\r\n        });\r\n        return function renderForm() {\r\n            // avoid resolving the form component as itself\r\n            const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (!props.as) {\r\n                return children;\r\n            }\r\n            // Attributes to add on a native `form` tag\r\n            const formAttrs = props.as === 'form'\r\n                ? {\r\n                    // Disables native validation as vee-validate will handle it.\r\n                    novalidate: true,\r\n                }\r\n                : {};\r\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\r\n        };\r\n    },\r\n});\r\nconst Form = FormImpl;\n\nlet FIELD_ARRAY_COUNTER = 0;\r\nfunction useFieldArray(arrayPath) {\r\n    const id = FIELD_ARRAY_COUNTER++;\r\n    const form = injectWithSelf(FormContextKey, undefined);\r\n    const fields = ref([]);\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noOp = () => { };\r\n    const noOpApi = {\r\n        fields: readonly(fields),\r\n        remove: noOp,\r\n        push: noOp,\r\n        swap: noOp,\r\n        insert: noOp,\r\n        update: noOp,\r\n        replace: noOp,\r\n        prepend: noOp,\r\n    };\r\n    if (!form) {\r\n        warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\r\n        return noOpApi;\r\n    }\r\n    if (!unref(arrayPath)) {\r\n        warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\r\n        return noOpApi;\r\n    }\r\n    let entryCounter = 0;\r\n    function initFields() {\r\n        const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\r\n        fields.value = currentValues.map(createEntry);\r\n        updateEntryFlags();\r\n    }\r\n    initFields();\r\n    function updateEntryFlags() {\r\n        const fieldsLength = fields.value.length;\r\n        for (let i = 0; i < fieldsLength; i++) {\r\n            const entry = fields.value[i];\r\n            entry.isFirst = i === 0;\r\n            entry.isLast = i === fieldsLength - 1;\r\n        }\r\n    }\r\n    function createEntry(value) {\r\n        const key = entryCounter++;\r\n        const entry = {\r\n            key,\r\n            value: computed(() => {\r\n                const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\r\n                const idx = fields.value.findIndex(e => e.key === key);\r\n                return idx === -1 ? value : currentValues[idx];\r\n            }),\r\n            isFirst: false,\r\n            isLast: false,\r\n        };\r\n        return entry;\r\n    }\r\n    function remove(idx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!pathValue || !Array.isArray(pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        newValue.splice(idx, 1);\r\n        form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.splice(idx, 1);\r\n        updateEntryFlags();\r\n    }\r\n    function push(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...normalizedPathValue];\r\n        newValue.push(value);\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.push(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function swap(indexA, indexB) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        // the old switcheroo\r\n        const temp = newValue[indexA];\r\n        newValue[indexA] = newValue[indexB];\r\n        newValue[indexB] = temp;\r\n        const tempEntry = newFields[indexA];\r\n        newFields[indexA] = newFields[indexB];\r\n        newFields[indexB] = tempEntry;\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function insert(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        newValue.splice(idx, 0, value);\r\n        newFields.splice(idx, 0, createEntry(value));\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function replace(arr) {\r\n        const pathName = unref(arrayPath);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\r\n        initFields();\r\n    }\r\n    function update(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\r\n            return;\r\n        }\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\r\n    }\r\n    function prepend(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [value, ...normalizedPathValue];\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.unshift(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    form.fieldArraysLookup[id] = {\r\n        reset: initFields,\r\n    };\r\n    onBeforeUnmount(() => {\r\n        delete form.fieldArraysLookup[id];\r\n    });\r\n    return {\r\n        fields: readonly(fields),\r\n        remove,\r\n        push,\r\n        swap,\r\n        insert,\r\n        update,\r\n        replace,\r\n        prepend,\r\n    };\r\n}\n\nconst FieldArrayImpl = defineComponent({\r\n    name: 'FieldArray',\r\n    inheritAttrs: false,\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const { push, remove, swap, insert, replace, update, prepend, fields } = useFieldArray(toRef(props, 'name'));\r\n        function slotProps() {\r\n            return {\r\n                fields: fields.value,\r\n                push,\r\n                remove,\r\n                swap,\r\n                insert,\r\n                update,\r\n                replace,\r\n                prepend,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            push,\r\n            remove,\r\n            swap,\r\n            insert,\r\n            update,\r\n            replace,\r\n            prepend,\r\n        });\r\n        return () => {\r\n            const children = normalizeChildren(undefined, ctx, slotProps);\r\n            return children;\r\n        };\r\n    },\r\n});\r\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = defineComponent({\r\n    name: 'ErrorMessage',\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const form = inject(FormContextKey, undefined);\r\n        const message = computed(() => {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                message: message.value,\r\n            };\r\n        }\r\n        return () => {\r\n            // Renders nothing if there are no messages\r\n            if (!message.value) {\r\n                return undefined;\r\n            }\r\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\r\n            // If no tag was specified and there are children\r\n            // render the slot as is without wrapping it\r\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\r\n                return children;\r\n            }\r\n            // If no children in slot\r\n            // render whatever specified and fallback to a <span> with the message in it's contents\r\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\r\n                return h(tag || 'span', attrs, message.value);\r\n            }\r\n            return h(tag, attrs, children);\r\n        };\r\n    },\r\n});\r\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function resetForm(state) {\r\n        if (!form) {\r\n            return;\r\n        }\r\n        return form.resetForm(state);\r\n    };\r\n}\n\n/**\r\n * If a field is dirty or not\r\n */\r\nfunction useIsFieldDirty(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.dirty;\r\n    });\r\n}\n\n/**\r\n * If a field is touched or not\r\n */\r\nfunction useIsFieldTouched(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.touched;\r\n    });\r\n}\n\n/**\r\n * If a field is validated and is valid\r\n */\r\nfunction useIsFieldValid(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.valid;\r\n    });\r\n}\n\n/**\r\n * If the form is submitting or not\r\n */\r\nfunction useIsSubmitting() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validates a single field\r\n */\r\nfunction useValidateField(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return function validateField() {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return Promise.resolve({\r\n                errors: [],\r\n                valid: true,\r\n            });\r\n        }\r\n        return field.validate();\r\n    };\r\n}\n\n/**\r\n * If the form is dirty or not\r\n */\r\nfunction useIsFormDirty() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form is touched or not\r\n */\r\nfunction useIsFormTouched() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form has been validated and is valid\r\n */\r\nfunction useIsFormValid() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validate multiple fields\r\n */\r\nfunction useValidateForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function validateField() {\r\n        if (!form) {\r\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\r\n        }\r\n        return form.validate();\r\n    };\r\n}\n\n/**\r\n * The number of form's submission count\r\n */\r\nfunction useSubmitCount() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\r\n    });\r\n}\n\n/**\r\n * Gives access to a field's current value\r\n */\r\nfunction useFieldValue(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\r\n        }\r\n        return unref(field === null || field === void 0 ? void 0 : field.value);\r\n    });\r\n}\n\n/**\r\n * Gives access to a form's values\r\n */\r\nfunction useFormValues() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\r\n    });\r\n}\n\n/**\r\n * Gives access to all form errors\r\n */\r\nfunction useFormErrors() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\r\n    });\r\n}\n\n/**\r\n * Gives access to a single field error\r\n */\r\nfunction useFieldError(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\r\n        }\r\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\r\n    });\r\n}\n\nfunction useSubmitForm(cb) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\r\n    return function submitForm(e) {\r\n        if (!onSubmit) {\r\n            return;\r\n        }\r\n        return onSubmit(e);\r\n    };\r\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}